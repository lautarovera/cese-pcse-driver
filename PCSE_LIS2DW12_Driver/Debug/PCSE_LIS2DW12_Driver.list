
PCSE_LIS2DW12_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fcc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006210  08006210  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006218  08006218  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000864  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008d4  200008d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130d9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235a  00000000  00000000  00033179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  000354d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e38  00000000  00000000  000363c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025197  00000000  00000000  00037200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e12  00000000  00000000  0005c397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de2a3  00000000  00000000  0006e1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c44c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043a8  00000000  00000000  0014c49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006164 	.word	0x08006164

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006164 	.word	0x08006164

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f001 f88f 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f873 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f981 	bl	80008b8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005b6:	f000 f8d9 	bl	800076c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ba:	f000 f925 	bl	8000808 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005be:	f000 f94d 	bl	800085c <MX_USB_OTG_FS_PCD_Init>
  // MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  lis2dw12_usr_cfg.odr = LIS2DW12_ODR_200_HZ;
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <main+0xdc>)
 80005c4:	2206      	movs	r2, #6
 80005c6:	701a      	strb	r2, [r3, #0]
  lis2dw12_usr_cfg.mode = LIS2DW12_MODE_HI_PF;
 80005c8:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <main+0xdc>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	705a      	strb	r2, [r3, #1]
  lis2dw12_usr_cfg.lpmode = LIS2DW12_LP_MODE_DEFAULT;
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <main+0xdc>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	709a      	strb	r2, [r3, #2]
  lis2dw12_usr_cfg.bwfilt = LIS2DW12_BW_FILT_1;
 80005d4:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <main+0xdc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	70da      	strb	r2, [r3, #3]
  lis2dw12_usr_cfg.fs = LIS2DW12_FS_2_G;
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <main+0xdc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	711a      	strb	r2, [r3, #4]
  lis2dw12_usr_cfg.fds = LIS2DW12_FDS_LP_FILT;
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <main+0xdc>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	715a      	strb	r2, [r3, #5]
  lis2dw12_usr_cfg.lownoise = LIS2DW12_LOW_NOISE_OFF;
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <main+0xdc>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	719a      	strb	r2, [r3, #6]

  lis2dw12_init(lis2dw12_usr_cfg);
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <main+0xdc>)
 80005ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005f2:	f000 fd59 	bl	80010a8 <lis2dw12_init>
  /* USER CODE END 2 */

  sprintf((char *)buffer_uart, "LIS2DW12 ID = 0x%x\r\n\n", lis2dw12_get_id());
 80005f6:	f000 fdf3 	bl	80011e0 <lis2dw12_get_id>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4921      	ldr	r1, [pc, #132]	; (8000684 <main+0xe0>)
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <main+0xe4>)
 8000602:	f005 f941 	bl	8005888 <siprintf>
  HAL_UART_Transmit(&huart3, buffer_uart, strlen((char *)buffer_uart), 0xFFFF);
 8000606:	4820      	ldr	r0, [pc, #128]	; (8000688 <main+0xe4>)
 8000608:	f7ff fdf2 	bl	80001f0 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000614:	491c      	ldr	r1, [pc, #112]	; (8000688 <main+0xe4>)
 8000616:	481d      	ldr	r0, [pc, #116]	; (800068c <main+0xe8>)
 8000618:	f004 fa8d 	bl	8004b36 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    if (lis2dw12_is_data_ready()) {
 800061c:	f000 fdf4 	bl	8001208 <lis2dw12_is_data_ready>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d018      	beq.n	8000658 <main+0xb4>
      x_mg = lis2dw12_get_mg_x();
 8000626:	f000 fe01 	bl	800122c <lis2dw12_get_mg_x>
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
      y_mg = lis2dw12_get_mg_y();
 800062e:	f000 fe71 	bl	8001314 <lis2dw12_get_mg_y>
 8000632:	4603      	mov	r3, r0
 8000634:	80bb      	strh	r3, [r7, #4]
      z_mg = lis2dw12_get_mg_z();
 8000636:	f000 fee1 	bl	80013fc <lis2dw12_get_mg_z>
 800063a:	4603      	mov	r3, r0
 800063c:	807b      	strh	r3, [r7, #2]

      sprintf((char *)buffer_uart, "X = %d\tY = %d\tZ = %d\r\n\n", x_mg, y_mg, z_mg);
 800063e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000642:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	460b      	mov	r3, r1
 800064e:	4910      	ldr	r1, [pc, #64]	; (8000690 <main+0xec>)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <main+0xe4>)
 8000652:	f005 f919 	bl	8005888 <siprintf>
 8000656:	e003      	b.n	8000660 <main+0xbc>
    }
    else {
      sprintf((char *)buffer_uart, "Data is not ready\r\n\n");
 8000658:	490e      	ldr	r1, [pc, #56]	; (8000694 <main+0xf0>)
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <main+0xe4>)
 800065c:	f005 f914 	bl	8005888 <siprintf>
    }

    HAL_UART_Transmit(&huart3, buffer_uart, strlen((char *)buffer_uart), 0xFFFF);
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <main+0xe4>)
 8000662:	f7ff fdc5 	bl	80001f0 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800066e:	4906      	ldr	r1, [pc, #24]	; (8000688 <main+0xe4>)
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <main+0xe8>)
 8000672:	f004 fa60 	bl	8004b36 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(500u);
 8000676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800067a:	f001 f899 	bl	80017b0 <HAL_Delay>
    if (lis2dw12_is_data_ready()) {
 800067e:	e7cd      	b.n	800061c <main+0x78>
 8000680:	20000838 	.word	0x20000838
 8000684:	0800617c 	.word	0x0800617c
 8000688:	20000804 	.word	0x20000804
 800068c:	200002b4 	.word	0x200002b4
 8000690:	08006194 	.word	0x08006194
 8000694:	080061ac 	.word	0x080061ac

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 f8e6 	bl	8005878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	; 0xa8
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fd25 	bl	800416c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f974 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f003 ff86 	bl	800465c <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f95d 	bl	8000a14 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_ETH_Init+0x84>)
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <MX_ETH_Init+0x88>)
 8000774:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_ETH_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_ETH_Init+0x8c>)
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_ETH_Init+0x8c>)
 8000784:	22e1      	movs	r2, #225	; 0xe1
 8000786:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_ETH_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ETH_Init+0x8c>)
 8000790:	2200      	movs	r2, #0
 8000792:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_ETH_Init+0x8c>)
 8000796:	2200      	movs	r2, #0
 8000798:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_ETH_Init+0x84>)
 800079c:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <MX_ETH_Init+0x8c>)
 800079e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_ETH_Init+0x84>)
 80007a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007a6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_ETH_Init+0x84>)
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <MX_ETH_Init+0x90>)
 80007ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_ETH_Init+0x84>)
 80007b0:	4a13      	ldr	r2, [pc, #76]	; (8000800 <MX_ETH_Init+0x94>)
 80007b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_ETH_Init+0x84>)
 80007b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_ETH_Init+0x84>)
 80007be:	f001 f901 	bl	80019c4 <HAL_ETH_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007c8:	f000 f924 	bl	8000a14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007cc:	2238      	movs	r2, #56	; 0x38
 80007ce:	2100      	movs	r1, #0
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_ETH_Init+0x98>)
 80007d2:	f005 f851 	bl	8005878 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_ETH_Init+0x98>)
 80007d8:	2221      	movs	r2, #33	; 0x21
 80007da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_ETH_Init+0x98>)
 80007de:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_ETH_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000204 	.word	0x20000204
 80007f4:	40028000 	.word	0x40028000
 80007f8:	20000840 	.word	0x20000840
 80007fc:	20000164 	.word	0x20000164
 8000800:	200000c4 	.word	0x200000c4
 8000804:	2000008c 	.word	0x2000008c

08000808 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART3_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART3_UART_Init+0x4c>)
 8000840:	f004 f92c 	bl	8004a9c <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f8e3 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200002b4 	.word	0x200002b4
 8000858:	40004800 	.word	0x40004800

0800085c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2204      	movs	r2, #4
 800086c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2202      	movs	r2, #2
 8000872:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2202      	movs	r2, #2
 800087e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2201      	movs	r2, #1
 8000884:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2201      	movs	r2, #1
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	f003 fb46 	bl	8003f30 <HAL_PCD_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f8b3 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200002f8 	.word	0x200002f8

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a4b      	ldr	r2, [pc, #300]	; (8000a04 <MX_GPIO_Init+0x14c>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b49      	ldr	r3, [pc, #292]	; (8000a04 <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a44      	ldr	r2, [pc, #272]	; (8000a04 <MX_GPIO_Init+0x14c>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a3d      	ldr	r2, [pc, #244]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a36      	ldr	r2, [pc, #216]	; (8000a04 <MX_GPIO_Init+0x14c>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a28      	ldr	r2, [pc, #160]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f244 0181 	movw	r1, #16513	; 0x4081
 800097c:	4822      	ldr	r0, [pc, #136]	; (8000a08 <MX_GPIO_Init+0x150>)
 800097e:	f001 fce1 	bl	8002344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	4821      	ldr	r0, [pc, #132]	; (8000a0c <MX_GPIO_Init+0x154>)
 8000988:	f001 fcdc 	bl	8002344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000992:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <MX_GPIO_Init+0x158>)
 80009a4:	f001 fb22 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_GPIO_Init+0x150>)
 80009c2:	f001 fb13 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0x154>)
 80009de:	f001 fb05 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_GPIO_Init+0x154>)
 80009f6:	f001 faf9 	bl	8001fec <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	40021800 	.word	0x40021800
 8000a10:	40020800 	.word	0x40020800

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a55      	ldr	r2, [pc, #340]	; (8000be4 <HAL_ETH_MspInit+0x174>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	f040 80a4 	bne.w	8000bdc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
 8000a98:	4b53      	ldr	r3, [pc, #332]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a52      	ldr	r2, [pc, #328]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b50      	ldr	r3, [pc, #320]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a4b      	ldr	r2, [pc, #300]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	4b45      	ldr	r3, [pc, #276]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a44      	ldr	r2, [pc, #272]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000ad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b42      	ldr	r3, [pc, #264]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a3d      	ldr	r2, [pc, #244]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4a36      	ldr	r2, [pc, #216]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6313      	str	r3, [r2, #48]	; 0x30
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b58:	2332      	movs	r3, #50	; 0x32
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b68:	230b      	movs	r3, #11
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	481e      	ldr	r0, [pc, #120]	; (8000bec <HAL_ETH_MspInit+0x17c>)
 8000b74:	f001 fa3a 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b78:	2386      	movs	r3, #134	; 0x86
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b88:	230b      	movs	r3, #11
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <HAL_ETH_MspInit+0x180>)
 8000b94:	f001 fa2a 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000baa:	230b      	movs	r3, #11
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <HAL_ETH_MspInit+0x184>)
 8000bb6:	f001 fa19 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <HAL_ETH_MspInit+0x188>)
 8000bd8:	f001 fa08 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3738      	adds	r7, #56	; 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40028000 	.word	0x40028000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020800 	.word	0x40020800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40021800 	.word	0x40021800

08000bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_I2C_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12c      	bne.n	8000c78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <HAL_I2C_MspInit+0x8c>)
 8000c58:	f001 f9c8 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_UART_MspInit+0x84>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12c      	bne.n	8000d08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ce6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_UART_MspInit+0x8c>)
 8000d04:	f001 f972 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40004800 	.word	0x40004800
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020c00 	.word	0x40020c00

08000d1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d3c:	d13f      	bne.n	8000dbe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d5a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d6c:	230a      	movs	r3, #10
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <HAL_PCD_MspInit+0xb0>)
 8000d78:	f001 f938 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <HAL_PCD_MspInit+0xb0>)
 8000d92:	f001 f92b 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6353      	str	r3, [r2, #52]	; 0x34
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 fca8 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f004 fce6 	bl	8005824 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20030000 	.word	0x20030000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000848 	.word	0x20000848
 8000e8c:	200008d8 	.word	0x200008d8

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed0:	4c0b      	ldr	r4, [pc, #44]	; (8000f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ede:	f7ff ffd7 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f004 fca5 	bl	8005830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fb5d 	bl	80005a4 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000eec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ef8:	08006220 	.word	0x08006220
  ldr r2, =_sbss
 8000efc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f00:	200008d4 	.word	0x200008d4

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <set_reg>:
static void get_raw_z(int16_t *raw_z);

/* Functions definitions -------------------------------------------------------------------------*/

static void set_reg(uint8_t reg_address, uint8_t reg_val)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71bb      	strb	r3, [r7, #6]
	i2c_status_t i2c_status = lis2dw12.i2c_mem_write(LIS2DW12_SAD_W, (uint16_t)reg_address, LIS2DW12_REG_SIZE, &reg_val, sizeof(uint8_t));
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <set_reg+0x44>)
 8000f1a:	68dc      	ldr	r4, [r3, #12]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	1dbb      	adds	r3, r7, #6
 8000f22:	2201      	movs	r2, #1
 8000f24:	9200      	str	r2, [sp, #0]
 8000f26:	2201      	movs	r2, #1
 8000f28:	2032      	movs	r0, #50	; 0x32
 8000f2a:	47a0      	blx	r4
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73fb      	strb	r3, [r7, #15]

	lis2dw12.status = (i2c_status == I2C_OK) ? LIS2DW12_OK : LIS2DW12_NOK;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <set_reg+0x44>)
 8000f40:	77da      	strb	r2, [r3, #31]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000084c 	.word	0x2000084c

08000f50 <get_reg>:

static void get_reg(uint8_t reg_address, uint8_t *reg_val)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
	lis2dw12.status = LIS2DW12_NOK;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <get_reg+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	77da      	strb	r2, [r3, #31]

	if (NULL != reg_val) {
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d015      	beq.n	8000f94 <get_reg+0x44>
		i2c_status_t i2c_status = lis2dw12.i2c_mem_read(LIS2DW12_SAD_R, (uint16_t)reg_address, LIS2DW12_REG_SIZE, &reg_val, sizeof(uint8_t));
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <get_reg+0x4c>)
 8000f6a:	691c      	ldr	r4, [r3, #16]
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	463b      	mov	r3, r7
 8000f72:	2201      	movs	r2, #1
 8000f74:	9200      	str	r2, [sp, #0]
 8000f76:	2201      	movs	r2, #1
 8000f78:	2033      	movs	r0, #51	; 0x33
 8000f7a:	47a0      	blx	r4
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]

		if (i2c_status == I2C_OK) {
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d103      	bne.n	8000f8e <get_reg+0x3e>
			lis2dw12.status = LIS2DW12_OK;
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <get_reg+0x4c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	77da      	strb	r2, [r3, #31]
		}
		else {
			*reg_val = 0u;
		}
	}
}
 8000f8c:	e002      	b.n	8000f94 <get_reg+0x44>
			*reg_val = 0u;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	2000084c 	.word	0x2000084c

08000fa0 <get_raw_x>:

static void get_raw_x(int16_t *raw_x)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	6078      	str	r0, [r7, #4]
	uint8_t data[2u];
	lis2dw12.status = LIS2DW12_NOK;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <get_raw_x+0x54>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	77da      	strb	r2, [r3, #31]

	if (NULL != raw_x) {
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01a      	beq.n	8000fea <get_raw_x+0x4a>
		i2c_status_t i2c_status = lis2dw12.i2c_mem_read(LIS2DW12_SAD_R, LIS2DW12_REG_OUT_X_L, LIS2DW12_REG_SIZE, &data[0u], sizeof(data));
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <get_raw_x+0x54>)
 8000fb6:	691c      	ldr	r4, [r3, #16]
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	9200      	str	r2, [sp, #0]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2128      	movs	r1, #40	; 0x28
 8000fc4:	2033      	movs	r0, #51	; 0x33
 8000fc6:	47a0      	blx	r4
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]

		if (I2C_OK == i2c_status) {
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d10b      	bne.n	8000fea <get_raw_x+0x4a>
			*raw_x = (int16_t)((uint16_t)data[1u] << 8u | (uint16_t)data[0u]);
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	801a      	strh	r2, [r3, #0]
			lis2dw12.status = I2C_OK;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <get_raw_x+0x54>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	77da      	strb	r2, [r3, #31]
		}
	}
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000084c 	.word	0x2000084c

08000ff8 <get_raw_y>:

static void get_raw_y(int16_t *raw_y)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
	uint8_t data[2u];
	lis2dw12.status = LIS2DW12_NOK;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <get_raw_y+0x54>)
 8001002:	2200      	movs	r2, #0
 8001004:	77da      	strb	r2, [r3, #31]

	if (NULL != raw_y) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01a      	beq.n	8001042 <get_raw_y+0x4a>
		i2c_status_t i2c_status = lis2dw12.i2c_mem_read(LIS2DW12_SAD_R, LIS2DW12_REG_OUT_Y_L, LIS2DW12_REG_SIZE, &data[0u], sizeof(data));
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <get_raw_y+0x54>)
 800100e:	691c      	ldr	r4, [r3, #16]
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2202      	movs	r2, #2
 8001016:	9200      	str	r2, [sp, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	212a      	movs	r1, #42	; 0x2a
 800101c:	2033      	movs	r0, #51	; 0x33
 800101e:	47a0      	blx	r4
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]

		if (I2C_OK == i2c_status) {
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10b      	bne.n	8001042 <get_raw_y+0x4a>
			*raw_y = (int16_t)((uint16_t)data[1u] << 8u | (uint16_t)data[0u]);
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b21a      	sxth	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	801a      	strh	r2, [r3, #0]
			lis2dw12.status = I2C_OK;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <get_raw_y+0x54>)
 800103e:	2201      	movs	r2, #1
 8001040:	77da      	strb	r2, [r3, #31]
		}
	}
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	bf00      	nop
 800104c:	2000084c 	.word	0x2000084c

08001050 <get_raw_z>:

static void get_raw_z(int16_t *raw_z)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b087      	sub	sp, #28
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
	uint8_t data[2u];
	lis2dw12.status = LIS2DW12_NOK;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <get_raw_z+0x54>)
 800105a:	2200      	movs	r2, #0
 800105c:	77da      	strb	r2, [r3, #31]

	if (NULL != raw_z) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01a      	beq.n	800109a <get_raw_z+0x4a>
		i2c_status_t i2c_status = lis2dw12.i2c_mem_read(LIS2DW12_SAD_R, LIS2DW12_REG_OUT_Z_L, LIS2DW12_REG_SIZE, &data[0u], sizeof(data));
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <get_raw_z+0x54>)
 8001066:	691c      	ldr	r4, [r3, #16]
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2202      	movs	r2, #2
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	212c      	movs	r1, #44	; 0x2c
 8001074:	2033      	movs	r0, #51	; 0x33
 8001076:	47a0      	blx	r4
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]

		if (I2C_OK == i2c_status) {
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10b      	bne.n	800109a <get_raw_z+0x4a>
			*raw_z = (int16_t)((uint16_t)data[1u] << 8u | (uint16_t)data[0u]);
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7b3b      	ldrb	r3, [r7, #12]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	801a      	strh	r2, [r3, #0]
			lis2dw12.status = I2C_OK;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <get_raw_z+0x54>)
 8001096:	2201      	movs	r2, #1
 8001098:	77da      	strb	r2, [r3, #31]
		}
	}
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000084c 	.word	0x2000084c

080010a8 <lis2dw12_init>:

void lis2dw12_init(lis2dw12_config_t usr_config)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	463b      	mov	r3, r7
 80010b0:	e883 0003 	stmia.w	r3, {r0, r1}
	lis2dw12_status_t status = LIS2DW12_NOK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_ctrl1_val = 0u;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_ctrl6_val = 0u;
 80010bc:	2300      	movs	r3, #0
 80010be:	737b      	strb	r3, [r7, #13]

	#ifdef STM32F429xx
	lis2dw12.i2c_init = stm32f429xx_i2c_init;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <lis2dw12_init+0x11c>)
 80010c2:	4a41      	ldr	r2, [pc, #260]	; (80011c8 <lis2dw12_init+0x120>)
 80010c4:	601a      	str	r2, [r3, #0]
	lis2dw12.i2c_master_tx = stm32f429xx_i2c_master_tx;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <lis2dw12_init+0x11c>)
 80010c8:	4a40      	ldr	r2, [pc, #256]	; (80011cc <lis2dw12_init+0x124>)
 80010ca:	605a      	str	r2, [r3, #4]
	lis2dw12.i2c_master_rx = stm32f429xx_i2c_master_rx;
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <lis2dw12_init+0x11c>)
 80010ce:	4a40      	ldr	r2, [pc, #256]	; (80011d0 <lis2dw12_init+0x128>)
 80010d0:	609a      	str	r2, [r3, #8]
	lis2dw12.i2c_mem_write = stm32f429xx_i2c_mem_write;
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <lis2dw12_init+0x11c>)
 80010d4:	4a3f      	ldr	r2, [pc, #252]	; (80011d4 <lis2dw12_init+0x12c>)
 80010d6:	60da      	str	r2, [r3, #12]
	lis2dw12.i2c_mem_read = stm32f429xx_i2c_mem_read;
 80010d8:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <lis2dw12_init+0x11c>)
 80010da:	4a3f      	ldr	r2, [pc, #252]	; (80011d8 <lis2dw12_init+0x130>)
 80010dc:	611a      	str	r2, [r3, #16]
	lis2dw12.i2c_is_dev_ready = stm32f429xx_i2c_is_dev_ready;
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <lis2dw12_init+0x11c>)
 80010e0:	4a3e      	ldr	r2, [pc, #248]	; (80011dc <lis2dw12_init+0x134>)
 80010e2:	615a      	str	r2, [r3, #20]
	#endif

	lis2dw12.config.odr = (usr_config.odr > LIS2DW12_ODR_1600_HZ) ? LIS2DW12_ODR_DEFAULT : usr_config.odr;
 80010e4:	783b      	ldrb	r3, [r7, #0]
 80010e6:	2b09      	cmp	r3, #9
 80010e8:	d801      	bhi.n	80010ee <lis2dw12_init+0x46>
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	e000      	b.n	80010f0 <lis2dw12_init+0x48>
 80010ee:	2306      	movs	r3, #6
 80010f0:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <lis2dw12_init+0x11c>)
 80010f2:	7613      	strb	r3, [r2, #24]
	lis2dw12.config.mode = (usr_config.mode > LIS2DW12_MODE_ON_DM) ? LIS2DW12_MODE_DEFAULT : usr_config.mode;
 80010f4:	787b      	ldrb	r3, [r7, #1]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d801      	bhi.n	80010fe <lis2dw12_init+0x56>
 80010fa:	787b      	ldrb	r3, [r7, #1]
 80010fc:	e000      	b.n	8001100 <lis2dw12_init+0x58>
 80010fe:	2301      	movs	r3, #1
 8001100:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <lis2dw12_init+0x11c>)
 8001102:	7653      	strb	r3, [r2, #25]
	lis2dw12.config.lpmode = (usr_config.lpmode > LIS2DW12_LP_MODE_4) ? LIS2DW12_LP_MODE_DEFAULT : usr_config.lpmode;
 8001104:	78bb      	ldrb	r3, [r7, #2]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d801      	bhi.n	800110e <lis2dw12_init+0x66>
 800110a:	78bb      	ldrb	r3, [r7, #2]
 800110c:	e000      	b.n	8001110 <lis2dw12_init+0x68>
 800110e:	2301      	movs	r3, #1
 8001110:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <lis2dw12_init+0x11c>)
 8001112:	7693      	strb	r3, [r2, #26]
	lis2dw12.config.bwfilt = (usr_config.bwfilt > LIS2DW12_BW_FILT_4) ? LIS2DW12_BW_FILT_DEFAULT : usr_config.bwfilt;
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d801      	bhi.n	800111e <lis2dw12_init+0x76>
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	e000      	b.n	8001120 <lis2dw12_init+0x78>
 800111e:	2301      	movs	r3, #1
 8001120:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <lis2dw12_init+0x11c>)
 8001122:	76d3      	strb	r3, [r2, #27]
	lis2dw12.config.fs = (usr_config.fs > LIS2DW12_FS_16_G) ?  LIS2DW12_FS_DEFAULT : usr_config.fs;
 8001124:	793b      	ldrb	r3, [r7, #4]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d801      	bhi.n	800112e <lis2dw12_init+0x86>
 800112a:	793b      	ldrb	r3, [r7, #4]
 800112c:	e000      	b.n	8001130 <lis2dw12_init+0x88>
 800112e:	2301      	movs	r3, #1
 8001130:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <lis2dw12_init+0x11c>)
 8001132:	7713      	strb	r3, [r2, #28]
	lis2dw12.config.fds = (usr_config.fds > LIS2DW12_FDS_HP_FILT) ? LIS2DW12_FDS_DEFAULT : usr_config.fds;
 8001134:	797b      	ldrb	r3, [r7, #5]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d801      	bhi.n	800113e <lis2dw12_init+0x96>
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	e000      	b.n	8001140 <lis2dw12_init+0x98>
 800113e:	2300      	movs	r3, #0
 8001140:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <lis2dw12_init+0x11c>)
 8001142:	7753      	strb	r3, [r2, #29]
	lis2dw12.config.lownoise = (usr_config.lownoise > LIS2DW12_LOW_NOISE_ON) ? LIS2DW12_LOW_NOISE_DEFAULT : usr_config.lownoise;;
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d801      	bhi.n	800114e <lis2dw12_init+0xa6>
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	e000      	b.n	8001150 <lis2dw12_init+0xa8>
 800114e:	2300      	movs	r3, #0
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <lis2dw12_init+0x11c>)
 8001152:	7793      	strb	r3, [r2, #30]

	lis2dw12.i2c_init();
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <lis2dw12_init+0x11c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4798      	blx	r3

	reg_ctrl1_val = (lis2dw12.config.odr << 4u | lis2dw12.config.mode << 2u | lis2dw12.config.lpmode);
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <lis2dw12_init+0x11c>)
 800115c:	7e1b      	ldrb	r3, [r3, #24]
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	b25a      	sxtb	r2, r3
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <lis2dw12_init+0x11c>)
 8001164:	7e5b      	ldrb	r3, [r3, #25]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	b25b      	sxtb	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b25a      	sxtb	r2, r3
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <lis2dw12_init+0x11c>)
 8001170:	7e9b      	ldrb	r3, [r3, #26]
 8001172:	b25b      	sxtb	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	73bb      	strb	r3, [r7, #14]
	reg_ctrl6_val = (lis2dw12.config.bwfilt << 6u | lis2dw12.config.fs << 4u | lis2dw12.config.fds << 3u | lis2dw12.config.lownoise << 2u);
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <lis2dw12_init+0x11c>)
 800117c:	7edb      	ldrb	r3, [r3, #27]
 800117e:	019b      	lsls	r3, r3, #6
 8001180:	b25a      	sxtb	r2, r3
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <lis2dw12_init+0x11c>)
 8001184:	7f1b      	ldrb	r3, [r3, #28]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	b25b      	sxtb	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b25a      	sxtb	r2, r3
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <lis2dw12_init+0x11c>)
 8001190:	7f5b      	ldrb	r3, [r3, #29]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	b25b      	sxtb	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b25a      	sxtb	r2, r3
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <lis2dw12_init+0x11c>)
 800119c:	7f9b      	ldrb	r3, [r3, #30]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	737b      	strb	r3, [r7, #13]

	set_reg(LIS2DW12_REG_CTRL1, reg_ctrl1_val);
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	4619      	mov	r1, r3
 80011ac:	2020      	movs	r0, #32
 80011ae:	f7ff feab 	bl	8000f08 <set_reg>

	set_reg(LIS2DW12_REG_CTRL6, reg_ctrl6_val);
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	4619      	mov	r1, r3
 80011b6:	2025      	movs	r0, #37	; 0x25
 80011b8:	f7ff fea6 	bl	8000f08 <set_reg>

}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000084c 	.word	0x2000084c
 80011c8:	080014e5 	.word	0x080014e5
 80011cc:	08001561 	.word	0x08001561
 80011d0:	080015a5 	.word	0x080015a5
 80011d4:	080015e9 	.word	0x080015e9
 80011d8:	0800163d 	.word	0x0800163d
 80011dc:	08001691 	.word	0x08001691

080011e0 <lis2dw12_get_id>:

uint8_t lis2dw12_get_id(void)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af02      	add	r7, sp, #8
	uint8_t data;

	lis2dw12.i2c_mem_read(LIS2DW12_SAD_R, LIS2DW12_REG_WHO_AM_I, LIS2DW12_REG_SIZE, &data, 1u);
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <lis2dw12_get_id+0x24>)
 80011e8:	691c      	ldr	r4, [r3, #16]
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	2201      	movs	r2, #1
 80011ee:	9200      	str	r2, [sp, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	210f      	movs	r1, #15
 80011f4:	2033      	movs	r0, #51	; 0x33
 80011f6:	47a0      	blx	r4

	return data;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	bf00      	nop
 8001204:	2000084c 	.word	0x2000084c

08001208 <lis2dw12_is_data_ready>:

lis2dw12_status_t lis2dw12_is_data_ready(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	uint8_t data_ready;

	get_reg(LIS2DW12_REG_STATUS, &data_ready);
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	4619      	mov	r1, r3
 8001212:	2027      	movs	r0, #39	; 0x27
 8001214:	f7ff fe9c 	bl	8000f50 <get_reg>

	return (lis2dw12_status_t)(data_ready &= 0x1u);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	79fb      	ldrb	r3, [r7, #7]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <lis2dw12_get_mg_x>:

	return (int16_t)((uint16_t)data[1u] << 8u | data[0u]);
}

int16_t lis2dw12_get_mg_x(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
	float sen_fac = 0u;
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
	uint8_t bit_shift = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 4u : 2u;
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <lis2dw12_get_mg_x+0xcc>)
 800123a:	7e9b      	ldrb	r3, [r3, #26]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <lis2dw12_get_mg_x+0x18>
 8001240:	2304      	movs	r3, #4
 8001242:	e000      	b.n	8001246 <lis2dw12_get_mg_x+0x1a>
 8001244:	2302      	movs	r3, #2
 8001246:	70fb      	strb	r3, [r7, #3]
	int16_t data;

	get_raw_x(&data);
 8001248:	463b      	mov	r3, r7
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fea8 	bl	8000fa0 <get_raw_x>

	data >>= bit_shift;
 8001250:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001254:	461a      	mov	r2, r3
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	fa42 f303 	asr.w	r3, r2, r3
 800125c:	b21b      	sxth	r3, r3
 800125e:	803b      	strh	r3, [r7, #0]

	switch(lis2dw12.config.fs)
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <lis2dw12_get_mg_x+0xcc>)
 8001262:	7f1b      	ldrb	r3, [r3, #28]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d82f      	bhi.n	80012c8 <lis2dw12_get_mg_x+0x9c>
 8001268:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <lis2dw12_get_mg_x+0x44>)
 800126a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126e:	bf00      	nop
 8001270:	08001281 	.word	0x08001281
 8001274:	08001293 	.word	0x08001293
 8001278:	080012a5 	.word	0x080012a5
 800127c:	080012b7 	.word	0x080012b7
	{
		case LIS2DW12_FS_2_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 0.976 : 0.244;
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <lis2dw12_get_mg_x+0xcc>)
 8001282:	7e9b      	ldrb	r3, [r3, #26]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <lis2dw12_get_mg_x+0x60>
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <lis2dw12_get_mg_x+0xd0>)
 800128a:	e000      	b.n	800128e <lis2dw12_get_mg_x+0x62>
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <lis2dw12_get_mg_x+0xd4>)
 800128e:	607b      	str	r3, [r7, #4]
			break;
 8001290:	e01b      	b.n	80012ca <lis2dw12_get_mg_x+0x9e>
		case LIS2DW12_FS_4_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 1.952 : 0.488;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <lis2dw12_get_mg_x+0xcc>)
 8001294:	7e9b      	ldrb	r3, [r3, #26]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <lis2dw12_get_mg_x+0x72>
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <lis2dw12_get_mg_x+0xd8>)
 800129c:	e000      	b.n	80012a0 <lis2dw12_get_mg_x+0x74>
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <lis2dw12_get_mg_x+0xdc>)
 80012a0:	607b      	str	r3, [r7, #4]
			break;
 80012a2:	e012      	b.n	80012ca <lis2dw12_get_mg_x+0x9e>
		case LIS2DW12_FS_8_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 3.904 : 0.976;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <lis2dw12_get_mg_x+0xcc>)
 80012a6:	7e9b      	ldrb	r3, [r3, #26]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <lis2dw12_get_mg_x+0x84>
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <lis2dw12_get_mg_x+0xe0>)
 80012ae:	e000      	b.n	80012b2 <lis2dw12_get_mg_x+0x86>
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <lis2dw12_get_mg_x+0xd0>)
 80012b2:	607b      	str	r3, [r7, #4]
			break;
 80012b4:	e009      	b.n	80012ca <lis2dw12_get_mg_x+0x9e>
		case LIS2DW12_FS_16_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 7.808 : 1.952;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <lis2dw12_get_mg_x+0xcc>)
 80012b8:	7e9b      	ldrb	r3, [r3, #26]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <lis2dw12_get_mg_x+0x96>
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <lis2dw12_get_mg_x+0xe4>)
 80012c0:	e000      	b.n	80012c4 <lis2dw12_get_mg_x+0x98>
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <lis2dw12_get_mg_x+0xd8>)
 80012c4:	607b      	str	r3, [r7, #4]
			break;
 80012c6:	e000      	b.n	80012ca <lis2dw12_get_mg_x+0x9e>
		default:
			/* Data will be 0 */
			break;
 80012c8:	bf00      	nop
	}

	data *= sen_fac;
 80012ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 3a90 	vmov	r3, s15
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	803b      	strh	r3, [r7, #0]

	return (data);
 80012ea:	f9b7 3000 	ldrsh.w	r3, [r7]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000084c 	.word	0x2000084c
 80012fc:	3f79db23 	.word	0x3f79db23
 8001300:	3e79db23 	.word	0x3e79db23
 8001304:	3ff9db23 	.word	0x3ff9db23
 8001308:	3ef9db23 	.word	0x3ef9db23
 800130c:	4079db23 	.word	0x4079db23
 8001310:	40f9db23 	.word	0x40f9db23

08001314 <lis2dw12_get_mg_y>:

int16_t lis2dw12_get_mg_y(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	float sen_fac = 0u;
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
	uint8_t bit_shift = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 4u : 2u;
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <lis2dw12_get_mg_y+0xcc>)
 8001322:	7e9b      	ldrb	r3, [r3, #26]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <lis2dw12_get_mg_y+0x18>
 8001328:	2304      	movs	r3, #4
 800132a:	e000      	b.n	800132e <lis2dw12_get_mg_y+0x1a>
 800132c:	2302      	movs	r3, #2
 800132e:	70fb      	strb	r3, [r7, #3]
	int16_t data;

	get_raw_y(&data);
 8001330:	463b      	mov	r3, r7
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fe60 	bl	8000ff8 <get_raw_y>

	data >>= bit_shift;
 8001338:	f9b7 3000 	ldrsh.w	r3, [r7]
 800133c:	461a      	mov	r2, r3
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	fa42 f303 	asr.w	r3, r2, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	803b      	strh	r3, [r7, #0]

	switch(lis2dw12.config.fs)
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <lis2dw12_get_mg_y+0xcc>)
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d82f      	bhi.n	80013b0 <lis2dw12_get_mg_y+0x9c>
 8001350:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <lis2dw12_get_mg_y+0x44>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	08001369 	.word	0x08001369
 800135c:	0800137b 	.word	0x0800137b
 8001360:	0800138d 	.word	0x0800138d
 8001364:	0800139f 	.word	0x0800139f
	{
		case LIS2DW12_FS_2_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 0.976 : 0.244;
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <lis2dw12_get_mg_y+0xcc>)
 800136a:	7e9b      	ldrb	r3, [r3, #26]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <lis2dw12_get_mg_y+0x60>
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <lis2dw12_get_mg_y+0xd0>)
 8001372:	e000      	b.n	8001376 <lis2dw12_get_mg_y+0x62>
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <lis2dw12_get_mg_y+0xd4>)
 8001376:	607b      	str	r3, [r7, #4]
			break;
 8001378:	e01b      	b.n	80013b2 <lis2dw12_get_mg_y+0x9e>
		case LIS2DW12_FS_4_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 1.952 : 0.488;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <lis2dw12_get_mg_y+0xcc>)
 800137c:	7e9b      	ldrb	r3, [r3, #26]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <lis2dw12_get_mg_y+0x72>
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <lis2dw12_get_mg_y+0xd8>)
 8001384:	e000      	b.n	8001388 <lis2dw12_get_mg_y+0x74>
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <lis2dw12_get_mg_y+0xdc>)
 8001388:	607b      	str	r3, [r7, #4]
			break;
 800138a:	e012      	b.n	80013b2 <lis2dw12_get_mg_y+0x9e>
		case LIS2DW12_FS_8_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 3.904 : 0.976;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <lis2dw12_get_mg_y+0xcc>)
 800138e:	7e9b      	ldrb	r3, [r3, #26]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <lis2dw12_get_mg_y+0x84>
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <lis2dw12_get_mg_y+0xe0>)
 8001396:	e000      	b.n	800139a <lis2dw12_get_mg_y+0x86>
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <lis2dw12_get_mg_y+0xd0>)
 800139a:	607b      	str	r3, [r7, #4]
			break;
 800139c:	e009      	b.n	80013b2 <lis2dw12_get_mg_y+0x9e>
		case LIS2DW12_FS_16_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 7.808 : 1.952;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <lis2dw12_get_mg_y+0xcc>)
 80013a0:	7e9b      	ldrb	r3, [r3, #26]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <lis2dw12_get_mg_y+0x96>
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <lis2dw12_get_mg_y+0xe4>)
 80013a8:	e000      	b.n	80013ac <lis2dw12_get_mg_y+0x98>
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <lis2dw12_get_mg_y+0xd8>)
 80013ac:	607b      	str	r3, [r7, #4]
			break;
 80013ae:	e000      	b.n	80013b2 <lis2dw12_get_mg_y+0x9e>
		default:
			/* Data will be 0 */
			break;
 80013b0:	bf00      	nop
	}

	data *= sen_fac;
 80013b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013be:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ca:	ee17 3a90 	vmov	r3, s15
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	803b      	strh	r3, [r7, #0]

	return (data);
 80013d2:	f9b7 3000 	ldrsh.w	r3, [r7]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000084c 	.word	0x2000084c
 80013e4:	3f79db23 	.word	0x3f79db23
 80013e8:	3e79db23 	.word	0x3e79db23
 80013ec:	3ff9db23 	.word	0x3ff9db23
 80013f0:	3ef9db23 	.word	0x3ef9db23
 80013f4:	4079db23 	.word	0x4079db23
 80013f8:	40f9db23 	.word	0x40f9db23

080013fc <lis2dw12_get_mg_z>:

int16_t lis2dw12_get_mg_z(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	float sen_fac = 0u;
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
	uint8_t bit_shift = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 4u : 2u;
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <lis2dw12_get_mg_z+0xcc>)
 800140a:	7e9b      	ldrb	r3, [r3, #26]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <lis2dw12_get_mg_z+0x18>
 8001410:	2304      	movs	r3, #4
 8001412:	e000      	b.n	8001416 <lis2dw12_get_mg_z+0x1a>
 8001414:	2302      	movs	r3, #2
 8001416:	70fb      	strb	r3, [r7, #3]
	int16_t data;

	get_raw_z(&data);
 8001418:	463b      	mov	r3, r7
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fe18 	bl	8001050 <get_raw_z>

	data >>= bit_shift;
 8001420:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001424:	461a      	mov	r2, r3
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	fa42 f303 	asr.w	r3, r2, r3
 800142c:	b21b      	sxth	r3, r3
 800142e:	803b      	strh	r3, [r7, #0]

	switch(lis2dw12.config.fs)
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <lis2dw12_get_mg_z+0xcc>)
 8001432:	7f1b      	ldrb	r3, [r3, #28]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d82f      	bhi.n	8001498 <lis2dw12_get_mg_z+0x9c>
 8001438:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <lis2dw12_get_mg_z+0x44>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001451 	.word	0x08001451
 8001444:	08001463 	.word	0x08001463
 8001448:	08001475 	.word	0x08001475
 800144c:	08001487 	.word	0x08001487
	{
		case LIS2DW12_FS_2_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 0.976 : 0.244;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <lis2dw12_get_mg_z+0xcc>)
 8001452:	7e9b      	ldrb	r3, [r3, #26]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <lis2dw12_get_mg_z+0x60>
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <lis2dw12_get_mg_z+0xd0>)
 800145a:	e000      	b.n	800145e <lis2dw12_get_mg_z+0x62>
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <lis2dw12_get_mg_z+0xd4>)
 800145e:	607b      	str	r3, [r7, #4]
			break;
 8001460:	e01b      	b.n	800149a <lis2dw12_get_mg_z+0x9e>
		case LIS2DW12_FS_4_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 1.952 : 0.488;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <lis2dw12_get_mg_z+0xcc>)
 8001464:	7e9b      	ldrb	r3, [r3, #26]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <lis2dw12_get_mg_z+0x72>
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <lis2dw12_get_mg_z+0xd8>)
 800146c:	e000      	b.n	8001470 <lis2dw12_get_mg_z+0x74>
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <lis2dw12_get_mg_z+0xdc>)
 8001470:	607b      	str	r3, [r7, #4]
			break;
 8001472:	e012      	b.n	800149a <lis2dw12_get_mg_z+0x9e>
		case LIS2DW12_FS_8_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 3.904 : 0.976;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <lis2dw12_get_mg_z+0xcc>)
 8001476:	7e9b      	ldrb	r3, [r3, #26]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <lis2dw12_get_mg_z+0x84>
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <lis2dw12_get_mg_z+0xe0>)
 800147e:	e000      	b.n	8001482 <lis2dw12_get_mg_z+0x86>
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <lis2dw12_get_mg_z+0xd0>)
 8001482:	607b      	str	r3, [r7, #4]
			break;
 8001484:	e009      	b.n	800149a <lis2dw12_get_mg_z+0x9e>
		case LIS2DW12_FS_16_G:
			sen_fac = (lis2dw12.config.lpmode == LIS2DW12_LP_MODE_1) ? 7.808 : 1.952;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <lis2dw12_get_mg_z+0xcc>)
 8001488:	7e9b      	ldrb	r3, [r3, #26]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <lis2dw12_get_mg_z+0x96>
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <lis2dw12_get_mg_z+0xe4>)
 8001490:	e000      	b.n	8001494 <lis2dw12_get_mg_z+0x98>
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <lis2dw12_get_mg_z+0xd8>)
 8001494:	607b      	str	r3, [r7, #4]
			break;
 8001496:	e000      	b.n	800149a <lis2dw12_get_mg_z+0x9e>
		default:
			/* Data will be 0 */
			break;
 8001498:	bf00      	nop
	}

	data *= sen_fac;
 800149a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b2:	ee17 3a90 	vmov	r3, s15
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	803b      	strh	r3, [r7, #0]

	return (data);
 80014ba:	f9b7 3000 	ldrsh.w	r3, [r7]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000084c 	.word	0x2000084c
 80014cc:	3f79db23 	.word	0x3f79db23
 80014d0:	3e79db23 	.word	0x3e79db23
 80014d4:	3ff9db23 	.word	0x3ff9db23
 80014d8:	3ef9db23 	.word	0x3ef9db23
 80014dc:	4079db23 	.word	0x4079db23
 80014e0:	40f9db23 	.word	0x40f9db23

080014e4 <stm32f429xx_i2c_init>:
/* Private prototypes ----------------------------------------------------------------------------*/

/* Functions definitions -------------------------------------------------------------------------*/

void stm32f429xx_i2c_init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 80014ea:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <stm32f429xx_i2c_init+0x74>)
 80014ec:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 80014f0:	4a1a      	ldr	r2, [pc, #104]	; (800155c <stm32f429xx_i2c_init+0x78>)
 80014f2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 8001522:	f000 ff29 	bl	8002378 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d000      	beq.n	800152e <stm32f429xx_i2c_init+0x4a>
	{
		for(;;);
 800152c:	e7fe      	b.n	800152c <stm32f429xx_i2c_init+0x48>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800152e:	2100      	movs	r1, #0
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 8001532:	f002 fc82 	bl	8003e3a <HAL_I2CEx_ConfigAnalogFilter>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d000      	beq.n	800153e <stm32f429xx_i2c_init+0x5a>
	{
		for(;;);
 800153c:	e7fe      	b.n	800153c <stm32f429xx_i2c_init+0x58>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800153e:	2100      	movs	r1, #0
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <stm32f429xx_i2c_init+0x70>)
 8001542:	f002 fcb6 	bl	8003eb2 <HAL_I2CEx_ConfigDigitalFilter>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d000      	beq.n	800154e <stm32f429xx_i2c_init+0x6a>
	{
		for(;;);
 800154c:	e7fe      	b.n	800154c <stm32f429xx_i2c_init+0x68>
	}
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000086c 	.word	0x2000086c
 8001558:	40005400 	.word	0x40005400
 800155c:	000186a0 	.word	0x000186a0

08001560 <stm32f429xx_i2c_master_tx>:

i2c_status_t stm32f429xx_i2c_master_tx(uint16_t dev_address, uint8_t *p_data, uint16_t size)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef hal_res = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73bb      	strb	r3, [r7, #14]
  i2c_status_t i2c_res = I2C_OK;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]

  hal_res = HAL_I2C_Master_Transmit(&hi2c1, dev_address, p_data, size, I2C_TIMEOUT);
 8001578:	88bb      	ldrh	r3, [r7, #4]
 800157a:	88f9      	ldrh	r1, [r7, #6]
 800157c:	220a      	movs	r2, #10
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4807      	ldr	r0, [pc, #28]	; (80015a0 <stm32f429xx_i2c_master_tx+0x40>)
 8001584:	f001 f83c 	bl	8002600 <HAL_I2C_Master_Transmit>
 8001588:	4603      	mov	r3, r0
 800158a:	73bb      	strb	r3, [r7, #14]

  if (HAL_OK != hal_res) {
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <stm32f429xx_i2c_master_tx+0x36>
    i2c_res = I2C_NOK;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
  }

  return i2c_res;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000086c 	.word	0x2000086c

080015a4 <stm32f429xx_i2c_master_rx>:

i2c_status_t stm32f429xx_i2c_master_rx(uint16_t dev_address, uint8_t *p_data, uint16_t size)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	80fb      	strh	r3, [r7, #6]
 80015b0:	4613      	mov	r3, r2
 80015b2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef hal_res = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73bb      	strb	r3, [r7, #14]
  i2c_status_t i2c_res = I2C_OK;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]

  hal_res = HAL_I2C_Master_Receive(&hi2c1, dev_address, p_data, size, I2C_TIMEOUT);
 80015bc:	88bb      	ldrh	r3, [r7, #4]
 80015be:	88f9      	ldrh	r1, [r7, #6]
 80015c0:	220a      	movs	r2, #10
 80015c2:	9200      	str	r2, [sp, #0]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <stm32f429xx_i2c_master_rx+0x40>)
 80015c8:	f001 f918 	bl	80027fc <HAL_I2C_Master_Receive>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73bb      	strb	r3, [r7, #14]

  if (HAL_OK != hal_res) {
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <stm32f429xx_i2c_master_rx+0x36>
	  i2c_res = I2C_NOK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  }

  return i2c_res;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000086c 	.word	0x2000086c

080015e8 <stm32f429xx_i2c_mem_write>:

i2c_status_t stm32f429xx_i2c_mem_write(uint16_t dev_address, uint16_t mem_address, uint16_t mem_address_size, uint8_t *p_data, uint16_t size)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4603      	mov	r3, r0
 80015f2:	81fb      	strh	r3, [r7, #14]
 80015f4:	460b      	mov	r3, r1
 80015f6:	81bb      	strh	r3, [r7, #12]
 80015f8:	4613      	mov	r3, r2
 80015fa:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef hal_res = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75bb      	strb	r3, [r7, #22]
  i2c_status_t i2c_res = I2C_OK;
 8001600:	2301      	movs	r3, #1
 8001602:	75fb      	strb	r3, [r7, #23]

  hal_res = HAL_I2C_Mem_Write(&hi2c1, dev_address, mem_address, mem_address_size, p_data, size, I2C_TIMEOUT);
 8001604:	8978      	ldrh	r0, [r7, #10]
 8001606:	89ba      	ldrh	r2, [r7, #12]
 8001608:	89f9      	ldrh	r1, [r7, #14]
 800160a:	230a      	movs	r3, #10
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	8c3b      	ldrh	r3, [r7, #32]
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4603      	mov	r3, r0
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <stm32f429xx_i2c_mem_write+0x50>)
 800161a:	f001 fb15 	bl	8002c48 <HAL_I2C_Mem_Write>
 800161e:	4603      	mov	r3, r0
 8001620:	75bb      	strb	r3, [r7, #22]

  if (HAL_OK != hal_res) {
 8001622:	7dbb      	ldrb	r3, [r7, #22]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <stm32f429xx_i2c_mem_write+0x44>
    i2c_res = I2C_NOK;
 8001628:	2300      	movs	r3, #0
 800162a:	75fb      	strb	r3, [r7, #23]
  }

  return i2c_res;
 800162c:	7dfb      	ldrb	r3, [r7, #23]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000086c 	.word	0x2000086c

0800163c <stm32f429xx_i2c_mem_read>:

i2c_status_t stm32f429xx_i2c_mem_read(uint16_t dev_address, uint16_t mem_address, uint16_t mem_address_size, uint8_t *p_data, uint16_t size)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af04      	add	r7, sp, #16
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	4603      	mov	r3, r0
 8001646:	81fb      	strh	r3, [r7, #14]
 8001648:	460b      	mov	r3, r1
 800164a:	81bb      	strh	r3, [r7, #12]
 800164c:	4613      	mov	r3, r2
 800164e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef hal_res = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	75bb      	strb	r3, [r7, #22]
  i2c_status_t i2c_res = I2C_OK;
 8001654:	2301      	movs	r3, #1
 8001656:	75fb      	strb	r3, [r7, #23]

  hal_res = HAL_I2C_Mem_Read(&hi2c1, dev_address, mem_address, mem_address_size, p_data, size, I2C_TIMEOUT);
 8001658:	8978      	ldrh	r0, [r7, #10]
 800165a:	89ba      	ldrh	r2, [r7, #12]
 800165c:	89f9      	ldrh	r1, [r7, #14]
 800165e:	230a      	movs	r3, #10
 8001660:	9302      	str	r3, [sp, #8]
 8001662:	8c3b      	ldrh	r3, [r7, #32]
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	4603      	mov	r3, r0
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <stm32f429xx_i2c_mem_read+0x50>)
 800166e:	f001 fbe5 	bl	8002e3c <HAL_I2C_Mem_Read>
 8001672:	4603      	mov	r3, r0
 8001674:	75bb      	strb	r3, [r7, #22]

  if (HAL_OK != hal_res) {
 8001676:	7dbb      	ldrb	r3, [r7, #22]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <stm32f429xx_i2c_mem_read+0x44>
    i2c_res = I2C_NOK;
 800167c:	2300      	movs	r3, #0
 800167e:	75fb      	strb	r3, [r7, #23]
  }

  return i2c_res;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000086c 	.word	0x2000086c

08001690 <stm32f429xx_i2c_is_dev_ready>:

i2c_status_t stm32f429xx_i2c_is_dev_ready(uint16_t dev_address, uint32_t trials)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_res = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73bb      	strb	r3, [r7, #14]
  i2c_status_t i2c_res = I2C_OK;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]

  hal_res = HAL_I2C_IsDeviceReady(&hi2c1, dev_address, trials, I2C_TIMEOUT);
 80016a4:	88f9      	ldrh	r1, [r7, #6]
 80016a6:	230a      	movs	r3, #10
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <stm32f429xx_i2c_is_dev_ready+0x38>)
 80016ac:	f001 fdec 	bl	8003288 <HAL_I2C_IsDeviceReady>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73bb      	strb	r3, [r7, #14]

  if (HAL_OK == hal_res) {
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <stm32f429xx_i2c_is_dev_ready+0x2e>
    i2c_res = I2C_NOK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  }

  return i2c_res;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000086c 	.word	0x2000086c

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_Init+0x40>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_Init+0x40>)
 80016e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_Init+0x40>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f931 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 f808 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001700:	f7ff f98e 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x54>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001726:	fbb3 f3f1 	udiv	r3, r3, r1
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f93b 	bl	80019aa <HAL_SYSTICK_Config>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00e      	b.n	800175c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d80a      	bhi.n	800175a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800174c:	f000 f911 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001750:	4a06      	ldr	r2, [pc, #24]	; (800176c <HAL_InitTick+0x5c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000000 	.word	0x20000000
 8001768:	20000008 	.word	0x20000008
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008
 8001794:	200008c0 	.word	0x200008c0

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200008c0 	.word	0x200008c0

080017b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff ffee 	bl	8001798 <HAL_GetTick>
 80017bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c8:	d005      	beq.n	80017d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_Delay+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017d6:	bf00      	nop
 80017d8:	f7ff ffde 	bl	8001798 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f7      	bhi.n	80017d8 <HAL_Delay+0x28>
  {
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff47 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff5c 	bl	8001840 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffb0 	bl	8001918 <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06c      	b.n	8001ab0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d106      	bne.n	80019ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2223      	movs	r2, #35	; 0x23
 80019e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff f841 	bl	8000a70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_ETH_Init+0xf4>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a30      	ldr	r2, [pc, #192]	; (8001ab8 <HAL_ETH_Init+0xf4>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_ETH_Init+0xf4>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <HAL_ETH_Init+0xf8>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_ETH_Init+0xf8>)
 8001a10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a14:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_ETH_Init+0xf8>)
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4927      	ldr	r1, [pc, #156]	; (8001abc <HAL_ETH_Init+0xf8>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_ETH_Init+0xf8>)
 8001a26:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a40:	f7ff feaa 	bl	8001798 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a46:	e011      	b.n	8001a6c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a48:	f7ff fea6 	bl	8001798 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a56:	d909      	bls.n	8001a6c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	22e0      	movs	r2, #224	; 0xe0
 8001a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e021      	b.n	8001ab0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e4      	bne.n	8001a48 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f944 	bl	8001d0c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f9eb 	bl	8001e60 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa41 	bl	8001f12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	461a      	mov	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f9a9 	bl	8001df0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40013800 	.word	0x40013800

08001ac0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <ETH_SetMACConfig+0x134>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	7c1b      	ldrb	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <ETH_SetMACConfig+0x28>
 8001ae2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ae6:	e000      	b.n	8001aea <ETH_SetMACConfig+0x2a>
 8001ae8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	7c5b      	ldrb	r3, [r3, #17]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <ETH_SetMACConfig+0x38>
 8001af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001af6:	e000      	b.n	8001afa <ETH_SetMACConfig+0x3a>
 8001af8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001afa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	7fdb      	ldrb	r3, [r3, #31]
 8001b06:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b08:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	7f92      	ldrb	r2, [r2, #30]
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d102      	bne.n	8001b1e <ETH_SetMACConfig+0x5e>
 8001b18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1c:	e000      	b.n	8001b20 <ETH_SetMACConfig+0x60>
 8001b1e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7f1b      	ldrb	r3, [r3, #28]
 8001b26:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b28:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	791b      	ldrb	r3, [r3, #4]
 8001b34:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	d102      	bne.n	8001b48 <ETH_SetMACConfig+0x88>
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	e000      	b.n	8001b4a <ETH_SetMACConfig+0x8a>
 8001b48:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7bdb      	ldrb	r3, [r3, #15]
 8001b50:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b52:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b60:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b62:	4313      	orrs	r3, r2
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff fe18 	bl	80017b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ba6:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001bac:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001bb4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001bbc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff fde7 	bl	80017b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	619a      	str	r2, [r3, #24]
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	ff20810f 	.word	0xff20810f

08001bf8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <ETH_SetDMAConfig+0x110>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	7b1b      	ldrb	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <ETH_SetDMAConfig+0x2c>
 8001c1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c22:	e000      	b.n	8001c26 <ETH_SetDMAConfig+0x2e>
 8001c24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7b5b      	ldrb	r3, [r3, #13]
 8001c2a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c2c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	7f52      	ldrb	r2, [r2, #29]
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d102      	bne.n	8001c3c <ETH_SetDMAConfig+0x44>
 8001c36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c3a:	e000      	b.n	8001c3e <ETH_SetDMAConfig+0x46>
 8001c3c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c3e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	7b9b      	ldrb	r3, [r3, #14]
 8001c44:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c46:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c4c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	7f1b      	ldrb	r3, [r3, #28]
 8001c52:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c54:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	7f9b      	ldrb	r3, [r3, #30]
 8001c5a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c5c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7ff fd8e 	bl	80017b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001cb2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cb8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cc0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001cc2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001cd0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cde:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fd5f 	bl	80017b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	f8de3f23 	.word	0xf8de3f23

08001d0c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0a6      	sub	sp, #152	; 0x98
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d84:	4619      	mov	r1, r3
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fe9a 	bl	8001ac0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dc6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dcc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff08 	bl	8001bf8 <ETH_SetDMAConfig>
}
 8001de8:	bf00      	nop
 8001dea:	3798      	adds	r7, #152	; 0x98
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3305      	adds	r3, #5
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	3204      	adds	r2, #4
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <ETH_MACAddressConfig+0x68>)
 8001e12:	4413      	add	r3, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	061a      	lsls	r2, r3, #24
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3302      	adds	r3, #2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	4313      	orrs	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <ETH_MACAddressConfig+0x6c>)
 8001e42:	4413      	add	r3, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	6013      	str	r3, [r2, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40028040 	.word	0x40028040
 8001e5c:	40028044 	.word	0x40028044

08001e60 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e03e      	b.n	8001eec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68d9      	ldr	r1, [r3, #12]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	3206      	adds	r2, #6
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d80c      	bhi.n	8001ed0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68d9      	ldr	r1, [r3, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	e004      	b.n	8001eda <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d9bd      	bls.n	8001e6e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f04:	611a      	str	r2, [r3, #16]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e046      	b.n	8001fae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6919      	ldr	r1, [r3, #16]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f64:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	3212      	adds	r2, #18
 8001f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d80c      	bhi.n	8001f9e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6919      	ldr	r1, [r3, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	e004      	b.n	8001fa8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3301      	adds	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d9b5      	bls.n	8001f20 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fde:	60da      	str	r2, [r3, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e177      	b.n	80022f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8166 	bne.w	80022f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d005      	beq.n	800203e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	2b02      	cmp	r3, #2
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d017      	beq.n	80020dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80c0 	beq.w	80022f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b66      	ldr	r3, [pc, #408]	; (8002310 <HAL_GPIO_Init+0x324>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a65      	ldr	r2, [pc, #404]	; (8002310 <HAL_GPIO_Init+0x324>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_GPIO_Init+0x324>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a61      	ldr	r2, [pc, #388]	; (8002314 <HAL_GPIO_Init+0x328>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a58      	ldr	r2, [pc, #352]	; (8002318 <HAL_GPIO_Init+0x32c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d037      	beq.n	800222a <HAL_GPIO_Init+0x23e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_GPIO_Init+0x330>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d031      	beq.n	8002226 <HAL_GPIO_Init+0x23a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a56      	ldr	r2, [pc, #344]	; (8002320 <HAL_GPIO_Init+0x334>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02b      	beq.n	8002222 <HAL_GPIO_Init+0x236>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <HAL_GPIO_Init+0x338>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d025      	beq.n	800221e <HAL_GPIO_Init+0x232>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a54      	ldr	r2, [pc, #336]	; (8002328 <HAL_GPIO_Init+0x33c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x22e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a53      	ldr	r2, [pc, #332]	; (800232c <HAL_GPIO_Init+0x340>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x22a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_GPIO_Init+0x344>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x226>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_GPIO_Init+0x348>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x222>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a50      	ldr	r2, [pc, #320]	; (8002338 <HAL_GPIO_Init+0x34c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x21e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4f      	ldr	r2, [pc, #316]	; (800233c <HAL_GPIO_Init+0x350>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x21a>
 8002202:	2309      	movs	r3, #9
 8002204:	e012      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002206:	230a      	movs	r3, #10
 8002208:	e010      	b.n	800222c <HAL_GPIO_Init+0x240>
 800220a:	2308      	movs	r3, #8
 800220c:	e00e      	b.n	800222c <HAL_GPIO_Init+0x240>
 800220e:	2307      	movs	r3, #7
 8002210:	e00c      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002212:	2306      	movs	r3, #6
 8002214:	e00a      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002216:	2305      	movs	r3, #5
 8002218:	e008      	b.n	800222c <HAL_GPIO_Init+0x240>
 800221a:	2304      	movs	r3, #4
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x240>
 800221e:	2303      	movs	r3, #3
 8002220:	e004      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002222:	2302      	movs	r3, #2
 8002224:	e002      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x240>
 800222a:	2300      	movs	r3, #0
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f002 0203 	and.w	r2, r2, #3
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	4093      	lsls	r3, r2
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223c:	4935      	ldr	r1, [pc, #212]	; (8002314 <HAL_GPIO_Init+0x328>)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_GPIO_Init+0x354>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800226e:	4a34      	ldr	r2, [pc, #208]	; (8002340 <HAL_GPIO_Init+0x354>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_GPIO_Init+0x354>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002298:	4a29      	ldr	r2, [pc, #164]	; (8002340 <HAL_GPIO_Init+0x354>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800229e:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_GPIO_Init+0x354>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_GPIO_Init+0x354>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_GPIO_Init+0x354>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_GPIO_Init+0x354>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	f67f ae84 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	40013800 	.word	0x40013800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020400 	.word	0x40020400
 8002320:	40020800 	.word	0x40020800
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40021000 	.word	0x40021000
 800232c:	40021400 	.word	0x40021400
 8002330:	40021800 	.word	0x40021800
 8002334:	40021c00 	.word	0x40021c00
 8002338:	40022000 	.word	0x40022000
 800233c:	40022400 	.word	0x40022400
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
 8002350:	4613      	mov	r3, r2
 8002352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002354:	787b      	ldrb	r3, [r7, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002360:	e003      	b.n	800236a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	041a      	lsls	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	619a      	str	r2, [r3, #24]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e12b      	b.n	80025e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fc2c 	bl	8000bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023dc:	f002 fb36 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 80023e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4a81      	ldr	r2, [pc, #516]	; (80025ec <HAL_I2C_Init+0x274>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d807      	bhi.n	80023fc <HAL_I2C_Init+0x84>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a80      	ldr	r2, [pc, #512]	; (80025f0 <HAL_I2C_Init+0x278>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf94      	ite	ls
 80023f4:	2301      	movls	r3, #1
 80023f6:	2300      	movhi	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e006      	b.n	800240a <HAL_I2C_Init+0x92>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a7d      	ldr	r2, [pc, #500]	; (80025f4 <HAL_I2C_Init+0x27c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	bf94      	ite	ls
 8002404:	2301      	movls	r3, #1
 8002406:	2300      	movhi	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0e7      	b.n	80025e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a78      	ldr	r2, [pc, #480]	; (80025f8 <HAL_I2C_Init+0x280>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a6a      	ldr	r2, [pc, #424]	; (80025ec <HAL_I2C_Init+0x274>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d802      	bhi.n	800244c <HAL_I2C_Init+0xd4>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3301      	adds	r3, #1
 800244a:	e009      	b.n	8002460 <HAL_I2C_Init+0xe8>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	4a69      	ldr	r2, [pc, #420]	; (80025fc <HAL_I2C_Init+0x284>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	3301      	adds	r3, #1
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	430b      	orrs	r3, r1
 8002466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002472:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	495c      	ldr	r1, [pc, #368]	; (80025ec <HAL_I2C_Init+0x274>)
 800247c:	428b      	cmp	r3, r1
 800247e:	d819      	bhi.n	80024b4 <HAL_I2C_Init+0x13c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1e59      	subs	r1, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fbb1 f3f3 	udiv	r3, r1, r3
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002494:	400b      	ands	r3, r1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_I2C_Init+0x138>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e59      	subs	r1, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ae:	e051      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 80024b0:	2304      	movs	r3, #4
 80024b2:	e04f      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d111      	bne.n	80024e0 <HAL_I2C_Init+0x168>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e012      	b.n	8002506 <HAL_I2C_Init+0x18e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	0099      	lsls	r1, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x196>
 800250a:	2301      	movs	r3, #1
 800250c:	e022      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10e      	bne.n	8002534 <HAL_I2C_Init+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e58      	subs	r0, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	440b      	add	r3, r1
 8002524:	fbb0 f3f3 	udiv	r3, r0, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002532:	e00f      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	0099      	lsls	r1, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	6809      	ldr	r1, [r1, #0]
 8002558:	4313      	orrs	r3, r2
 800255a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6911      	ldr	r1, [r2, #16]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	000186a0 	.word	0x000186a0
 80025f0:	001e847f 	.word	0x001e847f
 80025f4:	003d08ff 	.word	0x003d08ff
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
 8002610:	4613      	mov	r3, r2
 8002612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff f8c0 	bl	8001798 <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	f040 80e0 	bne.w	80027e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2319      	movs	r3, #25
 800262e:	2201      	movs	r2, #1
 8002630:	4970      	ldr	r1, [pc, #448]	; (80027f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f001 fa24 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e0d3      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x50>
 800264c:	2302      	movs	r3, #2
 800264e:	e0cc      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d007      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2221      	movs	r2, #33	; 0x21
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2210      	movs	r2, #16
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 ff10 	bl	80034e4 <I2C_MasterRequestWrite>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e08d      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026e4:	e066      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f001 fa9e 	bl	8003c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00d      	beq.n	8002712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d107      	bne.n	800270e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d11b      	bne.n	8002788 <HAL_I2C_Master_Transmit+0x188>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	6a39      	ldr	r1, [r7, #32]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f001 fa8e 	bl	8003cae <I2C_WaitOnBTFFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2b04      	cmp	r3, #4
 800279e:	d107      	bne.n	80027b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01a      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d194      	bne.n	80026e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000

080027fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	; 0x30
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7fe ffc2 	bl	8001798 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	f040 820b 	bne.w	8002c3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	2201      	movs	r2, #1
 800282c:	497c      	ldr	r1, [pc, #496]	; (8002a20 <HAL_I2C_Master_Receive+0x224>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f001 f926 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e1fe      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2C_Master_Receive+0x50>
 8002848:	2302      	movs	r3, #2
 800284a:	e1f7      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d007      	beq.n	8002872 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2222      	movs	r2, #34	; 0x22
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2210      	movs	r2, #16
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <HAL_I2C_Master_Receive+0x228>)
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fe94 	bl	80035e8 <I2C_MasterRequestRead>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e1b8      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d113      	bne.n	80028fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e18c      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d11b      	bne.n	800293a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e16c      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	2b02      	cmp	r3, #2
 8002940:	d11b      	bne.n	800297a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	e14c      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029a0:	e138      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	f200 80f1 	bhi.w	8002b8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d123      	bne.n	80029fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f001 f9b9 	bl	8003d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e139      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029fa:	e10b      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d14e      	bne.n	8002aa2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <HAL_I2C_Master_Receive+0x22c>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f001 f836 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e10e      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000
 8002a28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aa0:	e0b8      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4966      	ldr	r1, [pc, #408]	; (8002c44 <HAL_I2C_Master_Receive+0x448>)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 ffe7 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0bf      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2200      	movs	r2, #0
 8002b06:	494f      	ldr	r1, [pc, #316]	; (8002c44 <HAL_I2C_Master_Receive+0x448>)
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 ffb9 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e091      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b8c:	e042      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f001 f8cc 	bl	8003d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e04c      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d118      	bne.n	8002c14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f47f aec2 	bne.w	80029a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	00010004 	.word	0x00010004

08002c48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	813b      	strh	r3, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c62:	f7fe fd99 	bl	8001798 <HAL_GetTick>
 8002c66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	f040 80d9 	bne.w	8002e28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2319      	movs	r3, #25
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	496d      	ldr	r1, [pc, #436]	; (8002e34 <HAL_I2C_Mem_Write+0x1ec>)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fefd 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e0cc      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2C_Mem_Write+0x56>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0c5      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d007      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2221      	movs	r2, #33	; 0x21
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a4d      	ldr	r2, [pc, #308]	; (8002e38 <HAL_I2C_Mem_Write+0x1f0>)
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d06:	88f8      	ldrh	r0, [r7, #6]
 8002d08:	893a      	ldrh	r2, [r7, #8]
 8002d0a:	8979      	ldrh	r1, [r7, #10]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4603      	mov	r3, r0
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fd34 	bl	8003784 <I2C_RequestMemoryWrite>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d052      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e081      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 ff7e 	bl	8003c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d107      	bne.n	8002d4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e06b      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_I2C_Mem_Write+0x180>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d017      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1aa      	bne.n	8002d26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 ff6a 	bl	8003cae <I2C_WaitOnBTFFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d107      	bne.n	8002df8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e016      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	00100002 	.word	0x00100002
 8002e38:	ffff0000 	.word	0xffff0000

08002e3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e56:	f7fe fc9f 	bl	8001798 <HAL_GetTick>
 8002e5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	f040 8208 	bne.w	800327a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2319      	movs	r3, #25
 8002e70:	2201      	movs	r2, #1
 8002e72:	497b      	ldr	r1, [pc, #492]	; (8003060 <HAL_I2C_Mem_Read+0x224>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fe03 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
 8002e82:	e1fb      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2C_Mem_Read+0x56>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e1f4      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d007      	beq.n	8002eb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2222      	movs	r2, #34	; 0x22
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a5b      	ldr	r2, [pc, #364]	; (8003064 <HAL_I2C_Mem_Read+0x228>)
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002efa:	88f8      	ldrh	r0, [r7, #6]
 8002efc:	893a      	ldrh	r2, [r7, #8]
 8002efe:	8979      	ldrh	r1, [r7, #10]
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4603      	mov	r3, r0
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fcd0 	bl	80038b0 <I2C_RequestMemoryRead>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e1b0      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d113      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	623b      	str	r3, [r7, #32]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	623b      	str	r3, [r7, #32]
 8002f36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e184      	b.n	8003254 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d11b      	bne.n	8002f8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e164      	b.n	8003254 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d11b      	bne.n	8002fca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	e144      	b.n	8003254 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fe0:	e138      	b.n	8003254 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	f200 80f1 	bhi.w	80031ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d123      	bne.n	800303c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fe99 	bl	8003d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e139      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	855a      	strh	r2, [r3, #42]	; 0x2a
 800303a:	e10b      	b.n	8003254 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	2b02      	cmp	r3, #2
 8003042:	d14e      	bne.n	80030e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	2200      	movs	r2, #0
 800304c:	4906      	ldr	r1, [pc, #24]	; (8003068 <HAL_I2C_Mem_Read+0x22c>)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fd16 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e10e      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
 800305e:	bf00      	nop
 8003060:	00100002 	.word	0x00100002
 8003064:	ffff0000 	.word	0xffff0000
 8003068:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030e0:	e0b8      	b.n	8003254 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2200      	movs	r2, #0
 80030ea:	4966      	ldr	r1, [pc, #408]	; (8003284 <HAL_I2C_Mem_Read+0x448>)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fcc7 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0bf      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2200      	movs	r2, #0
 8003146:	494f      	ldr	r1, [pc, #316]	; (8003284 <HAL_I2C_Mem_Read+0x448>)
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fc99 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e091      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031cc:	e042      	b.n	8003254 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fdac 	bl	8003d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e04c      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d118      	bne.n	8003254 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	f47f aec2 	bne.w	8002fe2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3728      	adds	r7, #40	; 0x28
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00010004 	.word	0x00010004

08003288 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	460b      	mov	r3, r1
 8003296:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7fe fa7e 	bl	8001798 <HAL_GetTick>
 800329c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	f040 8111 	bne.w	80034d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2319      	movs	r3, #25
 80032b6:	2201      	movs	r2, #1
 80032b8:	4988      	ldr	r1, [pc, #544]	; (80034dc <HAL_I2C_IsDeviceReady+0x254>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fbe0 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
 80032c8:	e104      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_I2C_IsDeviceReady+0x50>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e0fd      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x24c>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d007      	beq.n	80032fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2224      	movs	r2, #36	; 0x24
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a70      	ldr	r2, [pc, #448]	; (80034e0 <HAL_I2C_IsDeviceReady+0x258>)
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003330:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fb9e 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003358:	d103      	bne.n	8003362 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0b6      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003374:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003376:	f7fe fa0f 	bl	8001798 <HAL_GetTick>
 800337a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033aa:	e025      	b.n	80033f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7fe f9f4 	bl	8001798 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <HAL_I2C_IsDeviceReady+0x13a>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	22a0      	movs	r2, #160	; 0xa0
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2ba0      	cmp	r3, #160	; 0xa0
 8003402:	d005      	beq.n	8003410 <HAL_I2C_IsDeviceReady+0x188>
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <HAL_I2C_IsDeviceReady+0x188>
 800340a:	7dbb      	ldrb	r3, [r7, #22]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0cd      	beq.n	80033ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d129      	bne.n	800347a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003434:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2319      	movs	r3, #25
 8003452:	2201      	movs	r2, #1
 8003454:	4921      	ldr	r1, [pc, #132]	; (80034dc <HAL_I2C_IsDeviceReady+0x254>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fb12 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e036      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e02c      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003488:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003492:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2319      	movs	r3, #25
 800349a:	2201      	movs	r2, #1
 800349c:	490f      	ldr	r1, [pc, #60]	; (80034dc <HAL_I2C_IsDeviceReady+0x254>)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 faee 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e012      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	f4ff af32 	bcc.w	8003322 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	00100002 	.word	0x00100002
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	460b      	mov	r3, r1
 80034f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d006      	beq.n	800350e <I2C_MasterRequestWrite+0x2a>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d003      	beq.n	800350e <I2C_MasterRequestWrite+0x2a>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800350c:	d108      	bne.n	8003520 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e00b      	b.n	8003538 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	2b12      	cmp	r3, #18
 8003526:	d107      	bne.n	8003538 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fa9b 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d103      	bne.n	8003568 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e035      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003574:	d108      	bne.n	8003588 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003584:	611a      	str	r2, [r3, #16]
 8003586:	e01b      	b.n	80035c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003588:	897b      	ldrh	r3, [r7, #10]
 800358a:	11db      	asrs	r3, r3, #7
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 0306 	and.w	r3, r3, #6
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f063 030f 	orn	r3, r3, #15
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	490e      	ldr	r1, [pc, #56]	; (80035e0 <I2C_MasterRequestWrite+0xfc>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fac1 	bl	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e010      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4907      	ldr	r1, [pc, #28]	; (80035e4 <I2C_MasterRequestWrite+0x100>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fab1 	bl	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00010008 	.word	0x00010008
 80035e4:	00010002 	.word	0x00010002

080035e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800360c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d006      	beq.n	8003622 <I2C_MasterRequestRead+0x3a>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d003      	beq.n	8003622 <I2C_MasterRequestRead+0x3a>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003620:	d108      	bne.n	8003634 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e00b      	b.n	800364c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	2b11      	cmp	r3, #17
 800363a:	d107      	bne.n	800364c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fa11 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d103      	bne.n	800367c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e079      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003688:	d108      	bne.n	800369c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	e05f      	b.n	800375c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800369c:	897b      	ldrh	r3, [r7, #10]
 800369e:	11db      	asrs	r3, r3, #7
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 0306 	and.w	r3, r3, #6
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f063 030f 	orn	r3, r3, #15
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4930      	ldr	r1, [pc, #192]	; (800377c <I2C_MasterRequestRead+0x194>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fa37 	bl	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e054      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4929      	ldr	r1, [pc, #164]	; (8003780 <I2C_MasterRequestRead+0x198>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa27 	bl	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e044      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f9af 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003736:	d103      	bne.n	8003740 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e017      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f063 030e 	orn	r3, r3, #14
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4907      	ldr	r1, [pc, #28]	; (8003780 <I2C_MasterRequestRead+0x198>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f9e3 	bl	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	00010008 	.word	0x00010008
 8003780:	00010002 	.word	0x00010002

08003784 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	817b      	strh	r3, [r7, #10]
 8003796:	460b      	mov	r3, r1
 8003798:	813b      	strh	r3, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f960 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d4:	d103      	bne.n	80037de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e05f      	b.n	80038a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	492d      	ldr	r1, [pc, #180]	; (80038ac <I2C_RequestMemoryWrite+0x128>)
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f998 	bl	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e04c      	b.n	80038a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fa02 	bl	8003c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b04      	cmp	r3, #4
 8003834:	d107      	bne.n	8003846 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e02b      	b.n	80038a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003850:	893b      	ldrh	r3, [r7, #8]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	611a      	str	r2, [r3, #16]
 800385a:	e021      	b.n	80038a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800385c:	893b      	ldrh	r3, [r7, #8]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	b29b      	uxth	r3, r3
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	6a39      	ldr	r1, [r7, #32]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f9dc 	bl	8003c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b04      	cmp	r3, #4
 8003880:	d107      	bne.n	8003892 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e005      	b.n	80038a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003896:	893b      	ldrh	r3, [r7, #8]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	00010002 	.word	0x00010002

080038b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	817b      	strh	r3, [r7, #10]
 80038c2:	460b      	mov	r3, r1
 80038c4:	813b      	strh	r3, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f8c2 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003910:	d103      	bne.n	800391a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0aa      	b.n	8003a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800391e:	897b      	ldrh	r3, [r7, #10]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800392c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	6a3a      	ldr	r2, [r7, #32]
 8003932:	4952      	ldr	r1, [pc, #328]	; (8003a7c <I2C_RequestMemoryRead+0x1cc>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f8fa 	bl	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e097      	b.n	8003a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	6a39      	ldr	r1, [r7, #32]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f964 	bl	8003c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b04      	cmp	r3, #4
 8003970:	d107      	bne.n	8003982 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e076      	b.n	8003a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800398c:	893b      	ldrh	r3, [r7, #8]
 800398e:	b2da      	uxtb	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	611a      	str	r2, [r3, #16]
 8003996:	e021      	b.n	80039dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003998:	893b      	ldrh	r3, [r7, #8]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	b29b      	uxth	r3, r3
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a8:	6a39      	ldr	r1, [r7, #32]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f93e 	bl	8003c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00d      	beq.n	80039d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d107      	bne.n	80039ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e050      	b.n	8003a74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d2:	893b      	ldrh	r3, [r7, #8]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	6a39      	ldr	r1, [r7, #32]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f923 	bl	8003c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d107      	bne.n	8003a04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e035      	b.n	8003a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f82b 	bl	8003a80 <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00d      	beq.n	8003a4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3e:	d103      	bne.n	8003a48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e013      	b.n	8003a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	6a3a      	ldr	r2, [r7, #32]
 8003a60:	4906      	ldr	r1, [pc, #24]	; (8003a7c <I2C_RequestMemoryRead+0x1cc>)
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f863 	bl	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	00010002 	.word	0x00010002

08003a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a90:	e025      	b.n	8003ade <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a98:	d021      	beq.n	8003ade <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9a:	f7fd fe7d 	bl	8001798 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d116      	bne.n	8003ade <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e023      	b.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d10d      	bne.n	8003b04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	43da      	mvns	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	e00c      	b.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d0b6      	beq.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b3c:	e051      	b.n	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4c:	d123      	bne.n	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e046      	b.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9c:	d021      	beq.n	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fd fdfb 	bl	8001798 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d116      	bne.n	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e020      	b.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d10c      	bne.n	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e00b      	b.n	8003c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d18d      	bne.n	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c38:	e02d      	b.n	8003c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f8ce 	bl	8003ddc <I2C_IsAcknowledgeFailed>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e02d      	b.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c50:	d021      	beq.n	8003c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7fd fda1 	bl	8001798 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d116      	bne.n	8003c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f043 0220 	orr.w	r2, r3, #32
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e007      	b.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d1ca      	bne.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cba:	e02d      	b.n	8003d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f88d 	bl	8003ddc <I2C_IsAcknowledgeFailed>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e02d      	b.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd2:	d021      	beq.n	8003d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fd fd60 	bl	8001798 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e007      	b.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d1ca      	bne.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d3c:	e042      	b.n	8003dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d119      	bne.n	8003d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0210 	mvn.w	r2, #16
 8003d54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e029      	b.n	8003dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7fd fd0a 	bl	8001798 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e007      	b.n	8003dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d1b5      	bne.n	8003d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d11b      	bne.n	8003e2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d129      	bne.n	8003ea4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0210 	bic.w	r2, r2, #16
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d12a      	bne.n	8003f22 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2224      	movs	r2, #36	; 0x24
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003eec:	89fb      	ldrh	r3, [r7, #14]
 8003eee:	f023 030f 	bic.w	r3, r3, #15
 8003ef2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	89fb      	ldrh	r3, [r7, #14]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	89fa      	ldrh	r2, [r7, #14]
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	b08f      	sub	sp, #60	; 0x3c
 8003f34:	af0a      	add	r7, sp, #40	; 0x28
 8003f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e10f      	b.n	8004162 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fc fedd 	bl	8000d1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2203      	movs	r2, #3
 8003f66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 f9ae 	bl	80052e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	687e      	ldr	r6, [r7, #4]
 8003f8e:	466d      	mov	r5, sp
 8003f90:	f106 0410 	add.w	r4, r6, #16
 8003f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fa4:	1d33      	adds	r3, r6, #4
 8003fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fa8:	6838      	ldr	r0, [r7, #0]
 8003faa:	f001 f939 	bl	8005220 <USB_CoreInit>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0d0      	b.n	8004162 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 f99c 	bl	8005304 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e04a      	b.n	8004068 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	333d      	adds	r3, #61	; 0x3d
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	333c      	adds	r3, #60	; 0x3c
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	b298      	uxth	r0, r3
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3344      	adds	r3, #68	; 0x44
 800400e:	4602      	mov	r2, r0
 8004010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3340      	adds	r3, #64	; 0x40
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3348      	adds	r3, #72	; 0x48
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	334c      	adds	r3, #76	; 0x4c
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	3354      	adds	r3, #84	; 0x54
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	3301      	adds	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d3af      	bcc.n	8003fd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004072:	2300      	movs	r3, #0
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e044      	b.n	8004102 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	3301      	adds	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d3b5      	bcc.n	8004078 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	687e      	ldr	r6, [r7, #4]
 8004114:	466d      	mov	r5, sp
 8004116:	f106 0410 	add.w	r4, r6, #16
 800411a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800411c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800411e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004126:	e885 0003 	stmia.w	r5, {r0, r1}
 800412a:	1d33      	adds	r3, r6, #4
 800412c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412e:	6838      	ldr	r0, [r7, #0]
 8004130:	f001 f934 	bl	800539c <USB_DevInit>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00d      	b.n	8004162 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f001 faff 	bl	800575e <USB_DevDisconnect>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800416c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e267      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d075      	beq.n	8004276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b04      	cmp	r3, #4
 8004194:	d00c      	beq.n	80041b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004196:	4b85      	ldr	r3, [pc, #532]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d112      	bne.n	80041c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a2:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ae:	d10b      	bne.n	80041c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	4b7e      	ldr	r3, [pc, #504]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d05b      	beq.n	8004274 <HAL_RCC_OscConfig+0x108>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d157      	bne.n	8004274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e242      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d0:	d106      	bne.n	80041e0 <HAL_RCC_OscConfig+0x74>
 80041d2:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a75      	ldr	r2, [pc, #468]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e01d      	b.n	800421c <HAL_RCC_OscConfig+0xb0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x98>
 80041ea:	4b70      	ldr	r3, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6f      	ldr	r2, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b6d      	ldr	r3, [pc, #436]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6c      	ldr	r2, [pc, #432]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xb0>
 8004204:	4b69      	ldr	r3, [pc, #420]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a68      	ldr	r2, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b66      	ldr	r3, [pc, #408]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a65      	ldr	r2, [pc, #404]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fd fab8 	bl	8001798 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422c:	f7fd fab4 	bl	8001798 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e207      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xc0>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fd faa4 	bl	8001798 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004254:	f7fd faa0 	bl	8001798 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e1f3      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	4b51      	ldr	r3, [pc, #324]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0xe8>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d063      	beq.n	800434a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004282:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004296:	2b08      	cmp	r3, #8
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429a:	4b44      	ldr	r3, [pc, #272]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x152>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1c7      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4937      	ldr	r1, [pc, #220]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e03a      	b.n	800434a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <HAL_RCC_OscConfig+0x244>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd fa59 	bl	8001798 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ea:	f7fd fa55 	bl	8001798 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1a8      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4925      	ldr	r1, [pc, #148]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_RCC_OscConfig+0x244>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fa38 	bl	8001798 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432c:	f7fd fa34 	bl	8001798 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e187      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d036      	beq.n	80043c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_RCC_OscConfig+0x248>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fa18 	bl	8001798 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436c:	f7fd fa14 	bl	8001798 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e167      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x200>
 800438a:	e01b      	b.n	80043c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_OscConfig+0x248>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fd fa01 	bl	8001798 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	e00e      	b.n	80043b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439a:	f7fd f9fd 	bl	8001798 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d907      	bls.n	80043b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e150      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
 80043ac:	40023800 	.word	0x40023800
 80043b0:	42470000 	.word	0x42470000
 80043b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ea      	bne.n	800439a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b81      	ldr	r3, [pc, #516]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	4b7d      	ldr	r3, [pc, #500]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a7c      	ldr	r2, [pc, #496]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b7a      	ldr	r3, [pc, #488]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	4b77      	ldr	r3, [pc, #476]	; (80045e0 <HAL_RCC_OscConfig+0x474>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d118      	bne.n	8004440 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440e:	4b74      	ldr	r3, [pc, #464]	; (80045e0 <HAL_RCC_OscConfig+0x474>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a73      	ldr	r2, [pc, #460]	; (80045e0 <HAL_RCC_OscConfig+0x474>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441a:	f7fd f9bd 	bl	8001798 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004422:	f7fd f9b9 	bl	8001798 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e10c      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <HAL_RCC_OscConfig+0x474>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x2ea>
 8004448:	4b64      	ldr	r3, [pc, #400]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	4a63      	ldr	r2, [pc, #396]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	; 0x70
 8004454:	e01c      	b.n	8004490 <HAL_RCC_OscConfig+0x324>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x30c>
 800445e:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a5e      	ldr	r2, [pc, #376]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
 800446a:	4b5c      	ldr	r3, [pc, #368]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a5b      	ldr	r2, [pc, #364]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0x324>
 8004478:	4b58      	ldr	r3, [pc, #352]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4a57      	ldr	r2, [pc, #348]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	; 0x70
 8004484:	4b55      	ldr	r3, [pc, #340]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a54      	ldr	r2, [pc, #336]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800448a:	f023 0304 	bic.w	r3, r3, #4
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd f97e 	bl	8001798 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fd f97a 	bl	8001798 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0cb      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	4b49      	ldr	r3, [pc, #292]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ee      	beq.n	80044a0 <HAL_RCC_OscConfig+0x334>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c4:	f7fd f968 	bl	8001798 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd f964 	bl	8001798 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0b5      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ee      	bne.n	80044cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b39      	ldr	r3, [pc, #228]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	4a38      	ldr	r2, [pc, #224]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80a1 	beq.w	800464c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450a:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b08      	cmp	r3, #8
 8004514:	d05c      	beq.n	80045d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d141      	bne.n	80045a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <HAL_RCC_OscConfig+0x478>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fd f938 	bl	8001798 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fd f934 	bl	8001798 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e087      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	491b      	ldr	r1, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x478>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd f90d 	bl	8001798 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004582:	f7fd f909 	bl	8001798 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e05c      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x416>
 80045a0:	e054      	b.n	800464c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCC_OscConfig+0x478>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd f8f6 	bl	8001798 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd f8f2 	bl	8001798 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e045      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x444>
 80045ce:	e03d      	b.n	800464c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e038      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40007000 	.word	0x40007000
 80045e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e8:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <HAL_RCC_OscConfig+0x4ec>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d028      	beq.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d121      	bne.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d11a      	bne.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004620:	4293      	cmp	r3, r2
 8004622:	d111      	bne.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	3b01      	subs	r3, #1
 8004632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800

0800465c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0cc      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b68      	ldr	r3, [pc, #416]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d90c      	bls.n	8004698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b65      	ldr	r3, [pc, #404]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b63      	ldr	r3, [pc, #396]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0b8      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b0:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c8:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a52      	ldr	r2, [pc, #328]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d4:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	494d      	ldr	r1, [pc, #308]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d044      	beq.n	800477c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d119      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e07f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d003      	beq.n	800471a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004716:	2b03      	cmp	r3, #3
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471a:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472a:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e067      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800473a:	4b37      	ldr	r3, [pc, #220]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f023 0203 	bic.w	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4934      	ldr	r1, [pc, #208]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800474c:	f7fd f824 	bl	8001798 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	e00a      	b.n	800476a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fd f820 	bl	8001798 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e04f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 020c 	and.w	r2, r3, #12
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	429a      	cmp	r2, r3
 800477a:	d1eb      	bne.n	8004754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800477c:	4b25      	ldr	r3, [pc, #148]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d20c      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b22      	ldr	r3, [pc, #136]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004792:	4b20      	ldr	r3, [pc, #128]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e032      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4916      	ldr	r1, [pc, #88]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	490e      	ldr	r1, [pc, #56]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047e2:	f000 f821 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	490a      	ldr	r1, [pc, #40]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	5ccb      	ldrb	r3, [r1, r3]
 80047f6:	fa22 f303 	lsr.w	r3, r2, r3
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <HAL_RCC_ClockConfig+0x1c8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fc ff84 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023c00 	.word	0x40023c00
 8004818:	40023800 	.word	0x40023800
 800481c:	080061c4 	.word	0x080061c4
 8004820:	20000000 	.word	0x20000000
 8004824:	20000004 	.word	0x20000004

08004828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b094      	sub	sp, #80	; 0x50
 800482e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	647b      	str	r3, [r7, #68]	; 0x44
 8004834:	2300      	movs	r3, #0
 8004836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004838:	2300      	movs	r3, #0
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004840:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	d00d      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x40>
 800484c:	2b08      	cmp	r3, #8
 800484e:	f200 80e1 	bhi.w	8004a14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x34>
 8004856:	2b04      	cmp	r3, #4
 8004858:	d003      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0x3a>
 800485a:	e0db      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800485c:	4b73      	ldr	r3, [pc, #460]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x204>)
 800485e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004860:	e0db      	b.n	8004a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004862:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x208>)
 8004864:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004866:	e0d8      	b.n	8004a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004868:	4b6f      	ldr	r3, [pc, #444]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x200>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004870:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004872:	4b6d      	ldr	r3, [pc, #436]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d063      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487e:	4b6a      	ldr	r3, [pc, #424]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	2200      	movs	r2, #0
 8004886:	63bb      	str	r3, [r7, #56]	; 0x38
 8004888:	63fa      	str	r2, [r7, #60]	; 0x3c
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004890:	633b      	str	r3, [r7, #48]	; 0x30
 8004892:	2300      	movs	r3, #0
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
 8004896:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800489a:	4622      	mov	r2, r4
 800489c:	462b      	mov	r3, r5
 800489e:	f04f 0000 	mov.w	r0, #0
 80048a2:	f04f 0100 	mov.w	r1, #0
 80048a6:	0159      	lsls	r1, r3, #5
 80048a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ac:	0150      	lsls	r0, r2, #5
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4621      	mov	r1, r4
 80048b4:	1a51      	subs	r1, r2, r1
 80048b6:	6139      	str	r1, [r7, #16]
 80048b8:	4629      	mov	r1, r5
 80048ba:	eb63 0301 	sbc.w	r3, r3, r1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048cc:	4659      	mov	r1, fp
 80048ce:	018b      	lsls	r3, r1, #6
 80048d0:	4651      	mov	r1, sl
 80048d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048d6:	4651      	mov	r1, sl
 80048d8:	018a      	lsls	r2, r1, #6
 80048da:	4651      	mov	r1, sl
 80048dc:	ebb2 0801 	subs.w	r8, r2, r1
 80048e0:	4659      	mov	r1, fp
 80048e2:	eb63 0901 	sbc.w	r9, r3, r1
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048fa:	4690      	mov	r8, r2
 80048fc:	4699      	mov	r9, r3
 80048fe:	4623      	mov	r3, r4
 8004900:	eb18 0303 	adds.w	r3, r8, r3
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	462b      	mov	r3, r5
 8004908:	eb49 0303 	adc.w	r3, r9, r3
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800491a:	4629      	mov	r1, r5
 800491c:	024b      	lsls	r3, r1, #9
 800491e:	4621      	mov	r1, r4
 8004920:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004924:	4621      	mov	r1, r4
 8004926:	024a      	lsls	r2, r1, #9
 8004928:	4610      	mov	r0, r2
 800492a:	4619      	mov	r1, r3
 800492c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800492e:	2200      	movs	r2, #0
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
 8004932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004934:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004938:	f7fb fcb2 	bl	80002a0 <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4613      	mov	r3, r2
 8004942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004944:	e058      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004946:	4b38      	ldr	r3, [pc, #224]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	099b      	lsrs	r3, r3, #6
 800494c:	2200      	movs	r2, #0
 800494e:	4618      	mov	r0, r3
 8004950:	4611      	mov	r1, r2
 8004952:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004956:	623b      	str	r3, [r7, #32]
 8004958:	2300      	movs	r3, #0
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
 800495c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	f04f 0000 	mov.w	r0, #0
 8004968:	f04f 0100 	mov.w	r1, #0
 800496c:	0159      	lsls	r1, r3, #5
 800496e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004972:	0150      	lsls	r0, r2, #5
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4641      	mov	r1, r8
 800497a:	ebb2 0a01 	subs.w	sl, r2, r1
 800497e:	4649      	mov	r1, r9
 8004980:	eb63 0b01 	sbc.w	fp, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004990:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004994:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004998:	ebb2 040a 	subs.w	r4, r2, sl
 800499c:	eb63 050b 	sbc.w	r5, r3, fp
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	00eb      	lsls	r3, r5, #3
 80049aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ae:	00e2      	lsls	r2, r4, #3
 80049b0:	4614      	mov	r4, r2
 80049b2:	461d      	mov	r5, r3
 80049b4:	4643      	mov	r3, r8
 80049b6:	18e3      	adds	r3, r4, r3
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	464b      	mov	r3, r9
 80049bc:	eb45 0303 	adc.w	r3, r5, r3
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ce:	4629      	mov	r1, r5
 80049d0:	028b      	lsls	r3, r1, #10
 80049d2:	4621      	mov	r1, r4
 80049d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d8:	4621      	mov	r1, r4
 80049da:	028a      	lsls	r2, r1, #10
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e2:	2200      	movs	r2, #0
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	61fa      	str	r2, [r7, #28]
 80049e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ec:	f7fb fc58 	bl	80002a0 <__aeabi_uldivmod>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4613      	mov	r3, r2
 80049f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x200>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	3301      	adds	r3, #1
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3750      	adds	r7, #80	; 0x50
 8004a20:	46bd      	mov	sp, r7
 8004a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	00f42400 	.word	0x00f42400
 8004a30:	007a1200 	.word	0x007a1200

08004a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a38:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000000 	.word	0x20000000

08004a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a50:	f7ff fff0 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	0a9b      	lsrs	r3, r3, #10
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	4903      	ldr	r1, [pc, #12]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	080061d4 	.word	0x080061d4

08004a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a78:	f7ff ffdc 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0b5b      	lsrs	r3, r3, #13
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4903      	ldr	r1, [pc, #12]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	080061d4 	.word	0x080061d4

08004a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e03f      	b.n	8004b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc f8e2 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2224      	movs	r2, #36	; 0x24
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f929 	bl	8004d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b08a      	sub	sp, #40	; 0x28
 8004b3a:	af02      	add	r7, sp, #8
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d17c      	bne.n	8004c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_UART_Transmit+0x2c>
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e075      	b.n	8004c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_UART_Transmit+0x3e>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e06e      	b.n	8004c52 <HAL_UART_Transmit+0x11c>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2221      	movs	r2, #33	; 0x21
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b8a:	f7fc fe05 	bl	8001798 <HAL_GetTick>
 8004b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	88fa      	ldrh	r2, [r7, #6]
 8004b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	88fa      	ldrh	r2, [r7, #6]
 8004b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba4:	d108      	bne.n	8004bb8 <HAL_UART_Transmit+0x82>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	e003      	b.n	8004bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004bc8:	e02a      	b.n	8004c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2180      	movs	r1, #128	; 0x80
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f840 	bl	8004c5a <UART_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e036      	b.n	8004c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10b      	bne.n	8004c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	e007      	b.n	8004c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	781a      	ldrb	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1cf      	bne.n	8004bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2140      	movs	r1, #64	; 0x40
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f810 	bl	8004c5a <UART_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e006      	b.n	8004c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e000      	b.n	8004c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c50:	2302      	movs	r3, #2
  }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3720      	adds	r7, #32
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b090      	sub	sp, #64	; 0x40
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	4613      	mov	r3, r2
 8004c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6a:	e050      	b.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c72:	d04c      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c7a:	f7fc fd8d 	bl	8001798 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d241      	bcs.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004caa:	637a      	str	r2, [r7, #52]	; 0x34
 8004cac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e5      	bne.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3314      	adds	r3, #20
 8004cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cde:	623a      	str	r2, [r7, #32]
 8004ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	69f9      	ldr	r1, [r7, #28]
 8004ce4:	6a3a      	ldr	r2, [r7, #32]
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e5      	bne.n	8004cbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e00f      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4013      	ands	r3, r2
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	bf0c      	ite	eq
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	2300      	movne	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d09f      	beq.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3740      	adds	r7, #64	; 0x40
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d3c:	b0c0      	sub	sp, #256	; 0x100
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	68d9      	ldr	r1, [r3, #12]
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	ea40 0301 	orr.w	r3, r0, r1
 8004d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d90:	f021 010c 	bic.w	r1, r1, #12
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db2:	6999      	ldr	r1, [r3, #24]
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	ea40 0301 	orr.w	r3, r0, r1
 8004dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b8f      	ldr	r3, [pc, #572]	; (8005004 <UART_SetConfig+0x2cc>)
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d005      	beq.n	8004dd8 <UART_SetConfig+0xa0>
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b8d      	ldr	r3, [pc, #564]	; (8005008 <UART_SetConfig+0x2d0>)
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d104      	bne.n	8004de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dd8:	f7ff fe4c 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8004ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004de0:	e003      	b.n	8004dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004de2:	f7ff fe33 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 8004de6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df4:	f040 810c 	bne.w	8005010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	462b      	mov	r3, r5
 8004e0e:	1891      	adds	r1, r2, r2
 8004e10:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e12:	415b      	adcs	r3, r3
 8004e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	eb12 0801 	adds.w	r8, r2, r1
 8004e20:	4629      	mov	r1, r5
 8004e22:	eb43 0901 	adc.w	r9, r3, r1
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3a:	4690      	mov	r8, r2
 8004e3c:	4699      	mov	r9, r3
 8004e3e:	4623      	mov	r3, r4
 8004e40:	eb18 0303 	adds.w	r3, r8, r3
 8004e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e48:	462b      	mov	r3, r5
 8004e4a:	eb49 0303 	adc.w	r3, r9, r3
 8004e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e66:	460b      	mov	r3, r1
 8004e68:	18db      	adds	r3, r3, r3
 8004e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	eb42 0303 	adc.w	r3, r2, r3
 8004e72:	657b      	str	r3, [r7, #84]	; 0x54
 8004e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e7c:	f7fb fa10 	bl	80002a0 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4b61      	ldr	r3, [pc, #388]	; (800500c <UART_SetConfig+0x2d4>)
 8004e86:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	011c      	lsls	r4, r3, #4
 8004e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ed0:	4692      	mov	sl, r2
 8004ed2:	469b      	mov	fp, r3
 8004ed4:	4643      	mov	r3, r8
 8004ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8004eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004efc:	460b      	mov	r3, r1
 8004efe:	18db      	adds	r3, r3, r3
 8004f00:	643b      	str	r3, [r7, #64]	; 0x40
 8004f02:	4613      	mov	r3, r2
 8004f04:	eb42 0303 	adc.w	r3, r2, r3
 8004f08:	647b      	str	r3, [r7, #68]	; 0x44
 8004f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f12:	f7fb f9c5 	bl	80002a0 <__aeabi_uldivmod>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4b3b      	ldr	r3, [pc, #236]	; (800500c <UART_SetConfig+0x2d4>)
 8004f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2264      	movs	r2, #100	; 0x64
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	1acb      	subs	r3, r1, r3
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f32:	4b36      	ldr	r3, [pc, #216]	; (800500c <UART_SetConfig+0x2d4>)
 8004f34:	fba3 2302 	umull	r2, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f40:	441c      	add	r4, r3
 8004f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	1891      	adds	r1, r2, r2
 8004f5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f5c:	415b      	adcs	r3, r3
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f64:	4641      	mov	r1, r8
 8004f66:	1851      	adds	r1, r2, r1
 8004f68:	6339      	str	r1, [r7, #48]	; 0x30
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	414b      	adcs	r3, r1
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	00cb      	lsls	r3, r1, #3
 8004f80:	4651      	mov	r1, sl
 8004f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f86:	4651      	mov	r1, sl
 8004f88:	00ca      	lsls	r2, r1, #3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4642      	mov	r2, r8
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f98:	464b      	mov	r3, r9
 8004f9a:	460a      	mov	r2, r1
 8004f9c:	eb42 0303 	adc.w	r3, r2, r3
 8004fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fb8:	460b      	mov	r3, r1
 8004fba:	18db      	adds	r3, r3, r3
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	eb42 0303 	adc.w	r3, r2, r3
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fce:	f7fb f967 	bl	80002a0 <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	; (800500c <UART_SetConfig+0x2d4>)
 8004fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	2164      	movs	r1, #100	; 0x64
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	3332      	adds	r3, #50	; 0x32
 8004fea:	4a08      	ldr	r2, [pc, #32]	; (800500c <UART_SetConfig+0x2d4>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	f003 0207 	and.w	r2, r3, #7
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4422      	add	r2, r4
 8004ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005000:	e105      	b.n	800520e <UART_SetConfig+0x4d6>
 8005002:	bf00      	nop
 8005004:	40011000 	.word	0x40011000
 8005008:	40011400 	.word	0x40011400
 800500c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005014:	2200      	movs	r2, #0
 8005016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800501a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800501e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005022:	4642      	mov	r2, r8
 8005024:	464b      	mov	r3, r9
 8005026:	1891      	adds	r1, r2, r2
 8005028:	6239      	str	r1, [r7, #32]
 800502a:	415b      	adcs	r3, r3
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
 800502e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005032:	4641      	mov	r1, r8
 8005034:	1854      	adds	r4, r2, r1
 8005036:	4649      	mov	r1, r9
 8005038:	eb43 0501 	adc.w	r5, r3, r1
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	00eb      	lsls	r3, r5, #3
 8005046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504a:	00e2      	lsls	r2, r4, #3
 800504c:	4614      	mov	r4, r2
 800504e:	461d      	mov	r5, r3
 8005050:	4643      	mov	r3, r8
 8005052:	18e3      	adds	r3, r4, r3
 8005054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005058:	464b      	mov	r3, r9
 800505a:	eb45 0303 	adc.w	r3, r5, r3
 800505e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800506e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800507e:	4629      	mov	r1, r5
 8005080:	008b      	lsls	r3, r1, #2
 8005082:	4621      	mov	r1, r4
 8005084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005088:	4621      	mov	r1, r4
 800508a:	008a      	lsls	r2, r1, #2
 800508c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005090:	f7fb f906 	bl	80002a0 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4b60      	ldr	r3, [pc, #384]	; (800521c <UART_SetConfig+0x4e4>)
 800509a:	fba3 2302 	umull	r2, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	011c      	lsls	r4, r3, #4
 80050a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	1891      	adds	r1, r2, r2
 80050ba:	61b9      	str	r1, [r7, #24]
 80050bc:	415b      	adcs	r3, r3
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c4:	4641      	mov	r1, r8
 80050c6:	1851      	adds	r1, r2, r1
 80050c8:	6139      	str	r1, [r7, #16]
 80050ca:	4649      	mov	r1, r9
 80050cc:	414b      	adcs	r3, r1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050dc:	4659      	mov	r1, fp
 80050de:	00cb      	lsls	r3, r1, #3
 80050e0:	4651      	mov	r1, sl
 80050e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050e6:	4651      	mov	r1, sl
 80050e8:	00ca      	lsls	r2, r1, #3
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	4642      	mov	r2, r8
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050f8:	464b      	mov	r3, r9
 80050fa:	460a      	mov	r2, r1
 80050fc:	eb42 0303 	adc.w	r3, r2, r3
 8005100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	67bb      	str	r3, [r7, #120]	; 0x78
 800510e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800511c:	4649      	mov	r1, r9
 800511e:	008b      	lsls	r3, r1, #2
 8005120:	4641      	mov	r1, r8
 8005122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005126:	4641      	mov	r1, r8
 8005128:	008a      	lsls	r2, r1, #2
 800512a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800512e:	f7fb f8b7 	bl	80002a0 <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4b39      	ldr	r3, [pc, #228]	; (800521c <UART_SetConfig+0x4e4>)
 8005138:	fba3 1302 	umull	r1, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	2164      	movs	r1, #100	; 0x64
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	3332      	adds	r3, #50	; 0x32
 800514a:	4a34      	ldr	r2, [pc, #208]	; (800521c <UART_SetConfig+0x4e4>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005156:	441c      	add	r4, r3
 8005158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515c:	2200      	movs	r2, #0
 800515e:	673b      	str	r3, [r7, #112]	; 0x70
 8005160:	677a      	str	r2, [r7, #116]	; 0x74
 8005162:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005166:	4642      	mov	r2, r8
 8005168:	464b      	mov	r3, r9
 800516a:	1891      	adds	r1, r2, r2
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	415b      	adcs	r3, r3
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005176:	4641      	mov	r1, r8
 8005178:	1851      	adds	r1, r2, r1
 800517a:	6039      	str	r1, [r7, #0]
 800517c:	4649      	mov	r1, r9
 800517e:	414b      	adcs	r3, r1
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800518e:	4659      	mov	r1, fp
 8005190:	00cb      	lsls	r3, r1, #3
 8005192:	4651      	mov	r1, sl
 8005194:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005198:	4651      	mov	r1, sl
 800519a:	00ca      	lsls	r2, r1, #3
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	4603      	mov	r3, r0
 80051a2:	4642      	mov	r2, r8
 80051a4:	189b      	adds	r3, r3, r2
 80051a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a8:	464b      	mov	r3, r9
 80051aa:	460a      	mov	r2, r1
 80051ac:	eb42 0303 	adc.w	r3, r2, r3
 80051b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	663b      	str	r3, [r7, #96]	; 0x60
 80051bc:	667a      	str	r2, [r7, #100]	; 0x64
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051ca:	4649      	mov	r1, r9
 80051cc:	008b      	lsls	r3, r1, #2
 80051ce:	4641      	mov	r1, r8
 80051d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d4:	4641      	mov	r1, r8
 80051d6:	008a      	lsls	r2, r1, #2
 80051d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051dc:	f7fb f860 	bl	80002a0 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <UART_SetConfig+0x4e4>)
 80051e6:	fba3 1302 	umull	r1, r3, r3, r2
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2164      	movs	r1, #100	; 0x64
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	3332      	adds	r3, #50	; 0x32
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <UART_SetConfig+0x4e4>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	f003 020f 	and.w	r2, r3, #15
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4422      	add	r2, r4
 800520c:	609a      	str	r2, [r3, #8]
}
 800520e:	bf00      	nop
 8005210:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005214:	46bd      	mov	sp, r7
 8005216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800521a:	bf00      	nop
 800521c:	51eb851f 	.word	0x51eb851f

08005220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005220:	b084      	sub	sp, #16
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	f107 001c 	add.w	r0, r7, #28
 800522e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	2b01      	cmp	r3, #1
 8005236:	d122      	bne.n	800527e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800524c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d105      	bne.n	8005272 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 faa2 	bl	80057bc <USB_CoreReset>
 8005278:	4603      	mov	r3, r0
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	e01a      	b.n	80052b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa96 	bl	80057bc <USB_CoreReset>
 8005290:	4603      	mov	r3, r0
 8005292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
 80052a6:	e005      	b.n	80052b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10b      	bne.n	80052d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f043 0206 	orr.w	r2, r3, #6
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052de:	b004      	add	sp, #16
 80052e0:	4770      	bx	lr

080052e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f023 0201 	bic.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d115      	bne.n	8005352 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005332:	2001      	movs	r0, #1
 8005334:	f7fc fa3c 	bl	80017b0 <HAL_Delay>
      ms++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa2e 	bl	80057a0 <USB_GetMode>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d01e      	beq.n	8005388 <USB_SetCurrentMode+0x84>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b31      	cmp	r3, #49	; 0x31
 800534e:	d9f0      	bls.n	8005332 <USB_SetCurrentMode+0x2e>
 8005350:	e01a      	b.n	8005388 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d115      	bne.n	8005384 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005364:	2001      	movs	r0, #1
 8005366:	f7fc fa23 	bl	80017b0 <HAL_Delay>
      ms++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fa15 	bl	80057a0 <USB_GetMode>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <USB_SetCurrentMode+0x84>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b31      	cmp	r3, #49	; 0x31
 8005380:	d9f0      	bls.n	8005364 <USB_SetCurrentMode+0x60>
 8005382:	e001      	b.n	8005388 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e005      	b.n	8005394 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b32      	cmp	r3, #50	; 0x32
 800538c:	d101      	bne.n	8005392 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800539c:	b084      	sub	sp, #16
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e009      	b.n	80053d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3340      	adds	r3, #64	; 0x40
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3301      	adds	r3, #1
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b0e      	cmp	r3, #14
 80053d4:	d9f2      	bls.n	80053bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11c      	bne.n	8005416 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ea:	f043 0302 	orr.w	r3, r3, #2
 80053ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
 8005414:	e00b      	b.n	800542e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005434:	461a      	mov	r2, r3
 8005436:	2300      	movs	r3, #0
 8005438:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	4619      	mov	r1, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	461a      	mov	r2, r3
 800544a:	680b      	ldr	r3, [r1, #0]
 800544c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	2b01      	cmp	r3, #1
 8005452:	d10c      	bne.n	800546e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d104      	bne.n	8005464 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800545a:	2100      	movs	r1, #0
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f965 	bl	800572c <USB_SetDevSpeed>
 8005462:	e008      	b.n	8005476 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005464:	2101      	movs	r1, #1
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f960 	bl	800572c <USB_SetDevSpeed>
 800546c:	e003      	b.n	8005476 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800546e:	2103      	movs	r1, #3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f95b 	bl	800572c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005476:	2110      	movs	r1, #16
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f8f3 	bl	8005664 <USB_FlushTxFifo>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f91f 	bl	80056cc <USB_FlushRxFifo>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	461a      	mov	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	461a      	mov	r2, r3
 80054ac:	2300      	movs	r3, #0
 80054ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	461a      	mov	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	e043      	b.n	800554a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d8:	d118      	bne.n	800550c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	461a      	mov	r2, r3
 80054ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	e013      	b.n	800551e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	461a      	mov	r2, r3
 8005504:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e008      	b.n	800551e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	461a      	mov	r2, r3
 800552c:	2300      	movs	r3, #0
 800552e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	461a      	mov	r2, r3
 800553e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005542:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	3301      	adds	r3, #1
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d3b7      	bcc.n	80054c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e043      	b.n	80055e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800556e:	d118      	bne.n	80055a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	461a      	mov	r2, r3
 8005584:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e013      	b.n	80055b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	461a      	mov	r2, r3
 800559a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e008      	b.n	80055b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	461a      	mov	r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	461a      	mov	r2, r3
 80055c2:	2300      	movs	r3, #0
 80055c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	461a      	mov	r2, r3
 80055d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3301      	adds	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d3b7      	bcc.n	8005558 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005608:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d105      	bne.n	800561c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f043 0210 	orr.w	r2, r3, #16
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <USB_DevInit+0x2c4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f043 0208 	orr.w	r2, r3, #8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d107      	bne.n	8005650 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005648:	f043 0304 	orr.w	r3, r3, #4
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005650:	7dfb      	ldrb	r3, [r7, #23]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800565c:	b004      	add	sp, #16
 800565e:	4770      	bx	lr
 8005660:	803c3800 	.word	0x803c3800

08005664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <USB_FlushTxFifo+0x64>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e01b      	b.n	80056bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	daf2      	bge.n	8005672 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	019b      	lsls	r3, r3, #6
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <USB_FlushTxFifo+0x64>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e006      	b.n	80056bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d0f0      	beq.n	800569c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	00030d40 	.word	0x00030d40

080056cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3301      	adds	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4a11      	ldr	r2, [pc, #68]	; (8005728 <USB_FlushRxFifo+0x5c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e018      	b.n	800571c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	daf2      	bge.n	80056d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2210      	movs	r2, #16
 80056fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <USB_FlushRxFifo+0x5c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e006      	b.n	800571c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d0f0      	beq.n	80056fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	00030d40 	.word	0x00030d40

0800572c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800574c:	4313      	orrs	r3, r2
 800574e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005778:	f023 0303 	bic.w	r3, r3, #3
 800577c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578c:	f043 0302 	orr.w	r3, r3, #2
 8005790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	f003 0301 	and.w	r3, r3, #1
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a13      	ldr	r2, [pc, #76]	; (8005820 <USB_CoreReset+0x64>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e01b      	b.n	8005812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	daf2      	bge.n	80057c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f043 0201 	orr.w	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3301      	adds	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4a09      	ldr	r2, [pc, #36]	; (8005820 <USB_CoreReset+0x64>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e006      	b.n	8005812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d0f0      	beq.n	80057f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	00030d40 	.word	0x00030d40

08005824 <__errno>:
 8005824:	4b01      	ldr	r3, [pc, #4]	; (800582c <__errno+0x8>)
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	2000000c 	.word	0x2000000c

08005830 <__libc_init_array>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4d0d      	ldr	r5, [pc, #52]	; (8005868 <__libc_init_array+0x38>)
 8005834:	4c0d      	ldr	r4, [pc, #52]	; (800586c <__libc_init_array+0x3c>)
 8005836:	1b64      	subs	r4, r4, r5
 8005838:	10a4      	asrs	r4, r4, #2
 800583a:	2600      	movs	r6, #0
 800583c:	42a6      	cmp	r6, r4
 800583e:	d109      	bne.n	8005854 <__libc_init_array+0x24>
 8005840:	4d0b      	ldr	r5, [pc, #44]	; (8005870 <__libc_init_array+0x40>)
 8005842:	4c0c      	ldr	r4, [pc, #48]	; (8005874 <__libc_init_array+0x44>)
 8005844:	f000 fc8e 	bl	8006164 <_init>
 8005848:	1b64      	subs	r4, r4, r5
 800584a:	10a4      	asrs	r4, r4, #2
 800584c:	2600      	movs	r6, #0
 800584e:	42a6      	cmp	r6, r4
 8005850:	d105      	bne.n	800585e <__libc_init_array+0x2e>
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	f855 3b04 	ldr.w	r3, [r5], #4
 8005858:	4798      	blx	r3
 800585a:	3601      	adds	r6, #1
 800585c:	e7ee      	b.n	800583c <__libc_init_array+0xc>
 800585e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005862:	4798      	blx	r3
 8005864:	3601      	adds	r6, #1
 8005866:	e7f2      	b.n	800584e <__libc_init_array+0x1e>
 8005868:	08006218 	.word	0x08006218
 800586c:	08006218 	.word	0x08006218
 8005870:	08006218 	.word	0x08006218
 8005874:	0800621c 	.word	0x0800621c

08005878 <memset>:
 8005878:	4402      	add	r2, r0
 800587a:	4603      	mov	r3, r0
 800587c:	4293      	cmp	r3, r2
 800587e:	d100      	bne.n	8005882 <memset+0xa>
 8005880:	4770      	bx	lr
 8005882:	f803 1b01 	strb.w	r1, [r3], #1
 8005886:	e7f9      	b.n	800587c <memset+0x4>

08005888 <siprintf>:
 8005888:	b40e      	push	{r1, r2, r3}
 800588a:	b500      	push	{lr}
 800588c:	b09c      	sub	sp, #112	; 0x70
 800588e:	ab1d      	add	r3, sp, #116	; 0x74
 8005890:	9002      	str	r0, [sp, #8]
 8005892:	9006      	str	r0, [sp, #24]
 8005894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005898:	4809      	ldr	r0, [pc, #36]	; (80058c0 <siprintf+0x38>)
 800589a:	9107      	str	r1, [sp, #28]
 800589c:	9104      	str	r1, [sp, #16]
 800589e:	4909      	ldr	r1, [pc, #36]	; (80058c4 <siprintf+0x3c>)
 80058a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a4:	9105      	str	r1, [sp, #20]
 80058a6:	6800      	ldr	r0, [r0, #0]
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	a902      	add	r1, sp, #8
 80058ac:	f000 f868 	bl	8005980 <_svfiprintf_r>
 80058b0:	9b02      	ldr	r3, [sp, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	b01c      	add	sp, #112	; 0x70
 80058b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058bc:	b003      	add	sp, #12
 80058be:	4770      	bx	lr
 80058c0:	2000000c 	.word	0x2000000c
 80058c4:	ffff0208 	.word	0xffff0208

080058c8 <__ssputs_r>:
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	688e      	ldr	r6, [r1, #8]
 80058ce:	429e      	cmp	r6, r3
 80058d0:	4682      	mov	sl, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	4690      	mov	r8, r2
 80058d6:	461f      	mov	r7, r3
 80058d8:	d838      	bhi.n	800594c <__ssputs_r+0x84>
 80058da:	898a      	ldrh	r2, [r1, #12]
 80058dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058e0:	d032      	beq.n	8005948 <__ssputs_r+0x80>
 80058e2:	6825      	ldr	r5, [r4, #0]
 80058e4:	6909      	ldr	r1, [r1, #16]
 80058e6:	eba5 0901 	sub.w	r9, r5, r1
 80058ea:	6965      	ldr	r5, [r4, #20]
 80058ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058f4:	3301      	adds	r3, #1
 80058f6:	444b      	add	r3, r9
 80058f8:	106d      	asrs	r5, r5, #1
 80058fa:	429d      	cmp	r5, r3
 80058fc:	bf38      	it	cc
 80058fe:	461d      	movcc	r5, r3
 8005900:	0553      	lsls	r3, r2, #21
 8005902:	d531      	bpl.n	8005968 <__ssputs_r+0xa0>
 8005904:	4629      	mov	r1, r5
 8005906:	f000 fb63 	bl	8005fd0 <_malloc_r>
 800590a:	4606      	mov	r6, r0
 800590c:	b950      	cbnz	r0, 8005924 <__ssputs_r+0x5c>
 800590e:	230c      	movs	r3, #12
 8005910:	f8ca 3000 	str.w	r3, [sl]
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	6921      	ldr	r1, [r4, #16]
 8005926:	464a      	mov	r2, r9
 8005928:	f000 fabe 	bl	8005ea8 <memcpy>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	6126      	str	r6, [r4, #16]
 800593a:	6165      	str	r5, [r4, #20]
 800593c:	444e      	add	r6, r9
 800593e:	eba5 0509 	sub.w	r5, r5, r9
 8005942:	6026      	str	r6, [r4, #0]
 8005944:	60a5      	str	r5, [r4, #8]
 8005946:	463e      	mov	r6, r7
 8005948:	42be      	cmp	r6, r7
 800594a:	d900      	bls.n	800594e <__ssputs_r+0x86>
 800594c:	463e      	mov	r6, r7
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	4632      	mov	r2, r6
 8005952:	4641      	mov	r1, r8
 8005954:	f000 fab6 	bl	8005ec4 <memmove>
 8005958:	68a3      	ldr	r3, [r4, #8]
 800595a:	1b9b      	subs	r3, r3, r6
 800595c:	60a3      	str	r3, [r4, #8]
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	4433      	add	r3, r6
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	2000      	movs	r0, #0
 8005966:	e7db      	b.n	8005920 <__ssputs_r+0x58>
 8005968:	462a      	mov	r2, r5
 800596a:	f000 fba5 	bl	80060b8 <_realloc_r>
 800596e:	4606      	mov	r6, r0
 8005970:	2800      	cmp	r0, #0
 8005972:	d1e1      	bne.n	8005938 <__ssputs_r+0x70>
 8005974:	6921      	ldr	r1, [r4, #16]
 8005976:	4650      	mov	r0, sl
 8005978:	f000 fabe 	bl	8005ef8 <_free_r>
 800597c:	e7c7      	b.n	800590e <__ssputs_r+0x46>
	...

08005980 <_svfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	4698      	mov	r8, r3
 8005986:	898b      	ldrh	r3, [r1, #12]
 8005988:	061b      	lsls	r3, r3, #24
 800598a:	b09d      	sub	sp, #116	; 0x74
 800598c:	4607      	mov	r7, r0
 800598e:	460d      	mov	r5, r1
 8005990:	4614      	mov	r4, r2
 8005992:	d50e      	bpl.n	80059b2 <_svfiprintf_r+0x32>
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	b963      	cbnz	r3, 80059b2 <_svfiprintf_r+0x32>
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	f000 fb19 	bl	8005fd0 <_malloc_r>
 800599e:	6028      	str	r0, [r5, #0]
 80059a0:	6128      	str	r0, [r5, #16]
 80059a2:	b920      	cbnz	r0, 80059ae <_svfiprintf_r+0x2e>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ac:	e0d1      	b.n	8005b52 <_svfiprintf_r+0x1d2>
 80059ae:	2340      	movs	r3, #64	; 0x40
 80059b0:	616b      	str	r3, [r5, #20]
 80059b2:	2300      	movs	r3, #0
 80059b4:	9309      	str	r3, [sp, #36]	; 0x24
 80059b6:	2320      	movs	r3, #32
 80059b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c0:	2330      	movs	r3, #48	; 0x30
 80059c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b6c <_svfiprintf_r+0x1ec>
 80059c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ca:	f04f 0901 	mov.w	r9, #1
 80059ce:	4623      	mov	r3, r4
 80059d0:	469a      	mov	sl, r3
 80059d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d6:	b10a      	cbz	r2, 80059dc <_svfiprintf_r+0x5c>
 80059d8:	2a25      	cmp	r2, #37	; 0x25
 80059da:	d1f9      	bne.n	80059d0 <_svfiprintf_r+0x50>
 80059dc:	ebba 0b04 	subs.w	fp, sl, r4
 80059e0:	d00b      	beq.n	80059fa <_svfiprintf_r+0x7a>
 80059e2:	465b      	mov	r3, fp
 80059e4:	4622      	mov	r2, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	4638      	mov	r0, r7
 80059ea:	f7ff ff6d 	bl	80058c8 <__ssputs_r>
 80059ee:	3001      	adds	r0, #1
 80059f0:	f000 80aa 	beq.w	8005b48 <_svfiprintf_r+0x1c8>
 80059f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f6:	445a      	add	r2, fp
 80059f8:	9209      	str	r2, [sp, #36]	; 0x24
 80059fa:	f89a 3000 	ldrb.w	r3, [sl]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80a2 	beq.w	8005b48 <_svfiprintf_r+0x1c8>
 8005a04:	2300      	movs	r3, #0
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a0e:	f10a 0a01 	add.w	sl, sl, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	9307      	str	r3, [sp, #28]
 8005a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a1c:	4654      	mov	r4, sl
 8005a1e:	2205      	movs	r2, #5
 8005a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a24:	4851      	ldr	r0, [pc, #324]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005a26:	f7fa fbeb 	bl	8000200 <memchr>
 8005a2a:	9a04      	ldr	r2, [sp, #16]
 8005a2c:	b9d8      	cbnz	r0, 8005a66 <_svfiprintf_r+0xe6>
 8005a2e:	06d0      	lsls	r0, r2, #27
 8005a30:	bf44      	itt	mi
 8005a32:	2320      	movmi	r3, #32
 8005a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a38:	0711      	lsls	r1, r2, #28
 8005a3a:	bf44      	itt	mi
 8005a3c:	232b      	movmi	r3, #43	; 0x2b
 8005a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a42:	f89a 3000 	ldrb.w	r3, [sl]
 8005a46:	2b2a      	cmp	r3, #42	; 0x2a
 8005a48:	d015      	beq.n	8005a76 <_svfiprintf_r+0xf6>
 8005a4a:	9a07      	ldr	r2, [sp, #28]
 8005a4c:	4654      	mov	r4, sl
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f04f 0c0a 	mov.w	ip, #10
 8005a54:	4621      	mov	r1, r4
 8005a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5a:	3b30      	subs	r3, #48	; 0x30
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d94e      	bls.n	8005afe <_svfiprintf_r+0x17e>
 8005a60:	b1b0      	cbz	r0, 8005a90 <_svfiprintf_r+0x110>
 8005a62:	9207      	str	r2, [sp, #28]
 8005a64:	e014      	b.n	8005a90 <_svfiprintf_r+0x110>
 8005a66:	eba0 0308 	sub.w	r3, r0, r8
 8005a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	46a2      	mov	sl, r4
 8005a74:	e7d2      	b.n	8005a1c <_svfiprintf_r+0x9c>
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	9103      	str	r1, [sp, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfbb      	ittet	lt
 8005a82:	425b      	neglt	r3, r3
 8005a84:	f042 0202 	orrlt.w	r2, r2, #2
 8005a88:	9307      	strge	r3, [sp, #28]
 8005a8a:	9307      	strlt	r3, [sp, #28]
 8005a8c:	bfb8      	it	lt
 8005a8e:	9204      	strlt	r2, [sp, #16]
 8005a90:	7823      	ldrb	r3, [r4, #0]
 8005a92:	2b2e      	cmp	r3, #46	; 0x2e
 8005a94:	d10c      	bne.n	8005ab0 <_svfiprintf_r+0x130>
 8005a96:	7863      	ldrb	r3, [r4, #1]
 8005a98:	2b2a      	cmp	r3, #42	; 0x2a
 8005a9a:	d135      	bne.n	8005b08 <_svfiprintf_r+0x188>
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	9203      	str	r2, [sp, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfb8      	it	lt
 8005aa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005aac:	3402      	adds	r4, #2
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b7c <_svfiprintf_r+0x1fc>
 8005ab4:	7821      	ldrb	r1, [r4, #0]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	4650      	mov	r0, sl
 8005aba:	f7fa fba1 	bl	8000200 <memchr>
 8005abe:	b140      	cbz	r0, 8005ad2 <_svfiprintf_r+0x152>
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	eba0 000a 	sub.w	r0, r0, sl
 8005ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aca:	9b04      	ldr	r3, [sp, #16]
 8005acc:	4303      	orrs	r3, r0
 8005ace:	3401      	adds	r4, #1
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad6:	4826      	ldr	r0, [pc, #152]	; (8005b70 <_svfiprintf_r+0x1f0>)
 8005ad8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005adc:	2206      	movs	r2, #6
 8005ade:	f7fa fb8f 	bl	8000200 <memchr>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d038      	beq.n	8005b58 <_svfiprintf_r+0x1d8>
 8005ae6:	4b23      	ldr	r3, [pc, #140]	; (8005b74 <_svfiprintf_r+0x1f4>)
 8005ae8:	bb1b      	cbnz	r3, 8005b32 <_svfiprintf_r+0x1b2>
 8005aea:	9b03      	ldr	r3, [sp, #12]
 8005aec:	3307      	adds	r3, #7
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	3308      	adds	r3, #8
 8005af4:	9303      	str	r3, [sp, #12]
 8005af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af8:	4433      	add	r3, r6
 8005afa:	9309      	str	r3, [sp, #36]	; 0x24
 8005afc:	e767      	b.n	80059ce <_svfiprintf_r+0x4e>
 8005afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b02:	460c      	mov	r4, r1
 8005b04:	2001      	movs	r0, #1
 8005b06:	e7a5      	b.n	8005a54 <_svfiprintf_r+0xd4>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	3401      	adds	r4, #1
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f04f 0c0a 	mov.w	ip, #10
 8005b14:	4620      	mov	r0, r4
 8005b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b1a:	3a30      	subs	r2, #48	; 0x30
 8005b1c:	2a09      	cmp	r2, #9
 8005b1e:	d903      	bls.n	8005b28 <_svfiprintf_r+0x1a8>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0c5      	beq.n	8005ab0 <_svfiprintf_r+0x130>
 8005b24:	9105      	str	r1, [sp, #20]
 8005b26:	e7c3      	b.n	8005ab0 <_svfiprintf_r+0x130>
 8005b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e7f0      	b.n	8005b14 <_svfiprintf_r+0x194>
 8005b32:	ab03      	add	r3, sp, #12
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	462a      	mov	r2, r5
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <_svfiprintf_r+0x1f8>)
 8005b3a:	a904      	add	r1, sp, #16
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	f3af 8000 	nop.w
 8005b42:	1c42      	adds	r2, r0, #1
 8005b44:	4606      	mov	r6, r0
 8005b46:	d1d6      	bne.n	8005af6 <_svfiprintf_r+0x176>
 8005b48:	89ab      	ldrh	r3, [r5, #12]
 8005b4a:	065b      	lsls	r3, r3, #25
 8005b4c:	f53f af2c 	bmi.w	80059a8 <_svfiprintf_r+0x28>
 8005b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b52:	b01d      	add	sp, #116	; 0x74
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	462a      	mov	r2, r5
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <_svfiprintf_r+0x1f8>)
 8005b60:	a904      	add	r1, sp, #16
 8005b62:	4638      	mov	r0, r7
 8005b64:	f000 f87a 	bl	8005c5c <_printf_i>
 8005b68:	e7eb      	b.n	8005b42 <_svfiprintf_r+0x1c2>
 8005b6a:	bf00      	nop
 8005b6c:	080061dc 	.word	0x080061dc
 8005b70:	080061e6 	.word	0x080061e6
 8005b74:	00000000 	.word	0x00000000
 8005b78:	080058c9 	.word	0x080058c9
 8005b7c:	080061e2 	.word	0x080061e2

08005b80 <_printf_common>:
 8005b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	4616      	mov	r6, r2
 8005b86:	4699      	mov	r9, r3
 8005b88:	688a      	ldr	r2, [r1, #8]
 8005b8a:	690b      	ldr	r3, [r1, #16]
 8005b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	bfb8      	it	lt
 8005b94:	4613      	movlt	r3, r2
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	b10a      	cbz	r2, 8005ba6 <_printf_common+0x26>
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	6033      	str	r3, [r6, #0]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	0699      	lsls	r1, r3, #26
 8005baa:	bf42      	ittt	mi
 8005bac:	6833      	ldrmi	r3, [r6, #0]
 8005bae:	3302      	addmi	r3, #2
 8005bb0:	6033      	strmi	r3, [r6, #0]
 8005bb2:	6825      	ldr	r5, [r4, #0]
 8005bb4:	f015 0506 	ands.w	r5, r5, #6
 8005bb8:	d106      	bne.n	8005bc8 <_printf_common+0x48>
 8005bba:	f104 0a19 	add.w	sl, r4, #25
 8005bbe:	68e3      	ldr	r3, [r4, #12]
 8005bc0:	6832      	ldr	r2, [r6, #0]
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	42ab      	cmp	r3, r5
 8005bc6:	dc26      	bgt.n	8005c16 <_printf_common+0x96>
 8005bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bcc:	1e13      	subs	r3, r2, #0
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	2301      	movne	r3, #1
 8005bd4:	0692      	lsls	r2, r2, #26
 8005bd6:	d42b      	bmi.n	8005c30 <_printf_common+0xb0>
 8005bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c0      	blx	r8
 8005be2:	3001      	adds	r0, #1
 8005be4:	d01e      	beq.n	8005c24 <_printf_common+0xa4>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	68e5      	ldr	r5, [r4, #12]
 8005bea:	6832      	ldr	r2, [r6, #0]
 8005bec:	f003 0306 	and.w	r3, r3, #6
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	bf08      	it	eq
 8005bf4:	1aad      	subeq	r5, r5, r2
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	6922      	ldr	r2, [r4, #16]
 8005bfa:	bf0c      	ite	eq
 8005bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c00:	2500      	movne	r5, #0
 8005c02:	4293      	cmp	r3, r2
 8005c04:	bfc4      	itt	gt
 8005c06:	1a9b      	subgt	r3, r3, r2
 8005c08:	18ed      	addgt	r5, r5, r3
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	341a      	adds	r4, #26
 8005c0e:	42b5      	cmp	r5, r6
 8005c10:	d11a      	bne.n	8005c48 <_printf_common+0xc8>
 8005c12:	2000      	movs	r0, #0
 8005c14:	e008      	b.n	8005c28 <_printf_common+0xa8>
 8005c16:	2301      	movs	r3, #1
 8005c18:	4652      	mov	r2, sl
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	47c0      	blx	r8
 8005c20:	3001      	adds	r0, #1
 8005c22:	d103      	bne.n	8005c2c <_printf_common+0xac>
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	e7c6      	b.n	8005bbe <_printf_common+0x3e>
 8005c30:	18e1      	adds	r1, r4, r3
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	2030      	movs	r0, #48	; 0x30
 8005c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c3a:	4422      	add	r2, r4
 8005c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c44:	3302      	adds	r3, #2
 8005c46:	e7c7      	b.n	8005bd8 <_printf_common+0x58>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4638      	mov	r0, r7
 8005c50:	47c0      	blx	r8
 8005c52:	3001      	adds	r0, #1
 8005c54:	d0e6      	beq.n	8005c24 <_printf_common+0xa4>
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7d9      	b.n	8005c0e <_printf_common+0x8e>
	...

08005c5c <_printf_i>:
 8005c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	7e0f      	ldrb	r7, [r1, #24]
 8005c62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c64:	2f78      	cmp	r7, #120	; 0x78
 8005c66:	4691      	mov	r9, r2
 8005c68:	4680      	mov	r8, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	469a      	mov	sl, r3
 8005c6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c72:	d807      	bhi.n	8005c84 <_printf_i+0x28>
 8005c74:	2f62      	cmp	r7, #98	; 0x62
 8005c76:	d80a      	bhi.n	8005c8e <_printf_i+0x32>
 8005c78:	2f00      	cmp	r7, #0
 8005c7a:	f000 80d8 	beq.w	8005e2e <_printf_i+0x1d2>
 8005c7e:	2f58      	cmp	r7, #88	; 0x58
 8005c80:	f000 80a3 	beq.w	8005dca <_printf_i+0x16e>
 8005c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c8c:	e03a      	b.n	8005d04 <_printf_i+0xa8>
 8005c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c92:	2b15      	cmp	r3, #21
 8005c94:	d8f6      	bhi.n	8005c84 <_printf_i+0x28>
 8005c96:	a101      	add	r1, pc, #4	; (adr r1, 8005c9c <_printf_i+0x40>)
 8005c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c9c:	08005cf5 	.word	0x08005cf5
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005c85 	.word	0x08005c85
 8005ca8:	08005c85 	.word	0x08005c85
 8005cac:	08005c85 	.word	0x08005c85
 8005cb0:	08005c85 	.word	0x08005c85
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005c85 	.word	0x08005c85
 8005cbc:	08005c85 	.word	0x08005c85
 8005cc0:	08005c85 	.word	0x08005c85
 8005cc4:	08005c85 	.word	0x08005c85
 8005cc8:	08005e15 	.word	0x08005e15
 8005ccc:	08005d39 	.word	0x08005d39
 8005cd0:	08005df7 	.word	0x08005df7
 8005cd4:	08005c85 	.word	0x08005c85
 8005cd8:	08005c85 	.word	0x08005c85
 8005cdc:	08005e37 	.word	0x08005e37
 8005ce0:	08005c85 	.word	0x08005c85
 8005ce4:	08005d39 	.word	0x08005d39
 8005ce8:	08005c85 	.word	0x08005c85
 8005cec:	08005c85 	.word	0x08005c85
 8005cf0:	08005dff 	.word	0x08005dff
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	602a      	str	r2, [r5, #0]
 8005cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0a3      	b.n	8005e50 <_printf_i+0x1f4>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	6829      	ldr	r1, [r5, #0]
 8005d0c:	0606      	lsls	r6, r0, #24
 8005d0e:	f101 0304 	add.w	r3, r1, #4
 8005d12:	d50a      	bpl.n	8005d2a <_printf_i+0xce>
 8005d14:	680e      	ldr	r6, [r1, #0]
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	da03      	bge.n	8005d24 <_printf_i+0xc8>
 8005d1c:	232d      	movs	r3, #45	; 0x2d
 8005d1e:	4276      	negs	r6, r6
 8005d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d24:	485e      	ldr	r0, [pc, #376]	; (8005ea0 <_printf_i+0x244>)
 8005d26:	230a      	movs	r3, #10
 8005d28:	e019      	b.n	8005d5e <_printf_i+0x102>
 8005d2a:	680e      	ldr	r6, [r1, #0]
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d32:	bf18      	it	ne
 8005d34:	b236      	sxthne	r6, r6
 8005d36:	e7ef      	b.n	8005d18 <_printf_i+0xbc>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	6820      	ldr	r0, [r4, #0]
 8005d3c:	1d19      	adds	r1, r3, #4
 8005d3e:	6029      	str	r1, [r5, #0]
 8005d40:	0601      	lsls	r1, r0, #24
 8005d42:	d501      	bpl.n	8005d48 <_printf_i+0xec>
 8005d44:	681e      	ldr	r6, [r3, #0]
 8005d46:	e002      	b.n	8005d4e <_printf_i+0xf2>
 8005d48:	0646      	lsls	r6, r0, #25
 8005d4a:	d5fb      	bpl.n	8005d44 <_printf_i+0xe8>
 8005d4c:	881e      	ldrh	r6, [r3, #0]
 8005d4e:	4854      	ldr	r0, [pc, #336]	; (8005ea0 <_printf_i+0x244>)
 8005d50:	2f6f      	cmp	r7, #111	; 0x6f
 8005d52:	bf0c      	ite	eq
 8005d54:	2308      	moveq	r3, #8
 8005d56:	230a      	movne	r3, #10
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d5e:	6865      	ldr	r5, [r4, #4]
 8005d60:	60a5      	str	r5, [r4, #8]
 8005d62:	2d00      	cmp	r5, #0
 8005d64:	bfa2      	ittt	ge
 8005d66:	6821      	ldrge	r1, [r4, #0]
 8005d68:	f021 0104 	bicge.w	r1, r1, #4
 8005d6c:	6021      	strge	r1, [r4, #0]
 8005d6e:	b90e      	cbnz	r6, 8005d74 <_printf_i+0x118>
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	d04d      	beq.n	8005e10 <_printf_i+0x1b4>
 8005d74:	4615      	mov	r5, r2
 8005d76:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d7a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d7e:	5dc7      	ldrb	r7, [r0, r7]
 8005d80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d84:	4637      	mov	r7, r6
 8005d86:	42bb      	cmp	r3, r7
 8005d88:	460e      	mov	r6, r1
 8005d8a:	d9f4      	bls.n	8005d76 <_printf_i+0x11a>
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d10b      	bne.n	8005da8 <_printf_i+0x14c>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	07de      	lsls	r6, r3, #31
 8005d94:	d508      	bpl.n	8005da8 <_printf_i+0x14c>
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	6861      	ldr	r1, [r4, #4]
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	bfde      	ittt	le
 8005d9e:	2330      	movle	r3, #48	; 0x30
 8005da0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005da4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005da8:	1b52      	subs	r2, r2, r5
 8005daa:	6122      	str	r2, [r4, #16]
 8005dac:	f8cd a000 	str.w	sl, [sp]
 8005db0:	464b      	mov	r3, r9
 8005db2:	aa03      	add	r2, sp, #12
 8005db4:	4621      	mov	r1, r4
 8005db6:	4640      	mov	r0, r8
 8005db8:	f7ff fee2 	bl	8005b80 <_printf_common>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d14c      	bne.n	8005e5a <_printf_i+0x1fe>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc4:	b004      	add	sp, #16
 8005dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dca:	4835      	ldr	r0, [pc, #212]	; (8005ea0 <_printf_i+0x244>)
 8005dcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dd0:	6829      	ldr	r1, [r5, #0]
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dd8:	6029      	str	r1, [r5, #0]
 8005dda:	061d      	lsls	r5, r3, #24
 8005ddc:	d514      	bpl.n	8005e08 <_printf_i+0x1ac>
 8005dde:	07df      	lsls	r7, r3, #31
 8005de0:	bf44      	itt	mi
 8005de2:	f043 0320 	orrmi.w	r3, r3, #32
 8005de6:	6023      	strmi	r3, [r4, #0]
 8005de8:	b91e      	cbnz	r6, 8005df2 <_printf_i+0x196>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	f023 0320 	bic.w	r3, r3, #32
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	2310      	movs	r3, #16
 8005df4:	e7b0      	b.n	8005d58 <_printf_i+0xfc>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	f043 0320 	orr.w	r3, r3, #32
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	2378      	movs	r3, #120	; 0x78
 8005e00:	4828      	ldr	r0, [pc, #160]	; (8005ea4 <_printf_i+0x248>)
 8005e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e06:	e7e3      	b.n	8005dd0 <_printf_i+0x174>
 8005e08:	0659      	lsls	r1, r3, #25
 8005e0a:	bf48      	it	mi
 8005e0c:	b2b6      	uxthmi	r6, r6
 8005e0e:	e7e6      	b.n	8005dde <_printf_i+0x182>
 8005e10:	4615      	mov	r5, r2
 8005e12:	e7bb      	b.n	8005d8c <_printf_i+0x130>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	6826      	ldr	r6, [r4, #0]
 8005e18:	6961      	ldr	r1, [r4, #20]
 8005e1a:	1d18      	adds	r0, r3, #4
 8005e1c:	6028      	str	r0, [r5, #0]
 8005e1e:	0635      	lsls	r5, r6, #24
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	d501      	bpl.n	8005e28 <_printf_i+0x1cc>
 8005e24:	6019      	str	r1, [r3, #0]
 8005e26:	e002      	b.n	8005e2e <_printf_i+0x1d2>
 8005e28:	0670      	lsls	r0, r6, #25
 8005e2a:	d5fb      	bpl.n	8005e24 <_printf_i+0x1c8>
 8005e2c:	8019      	strh	r1, [r3, #0]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	4615      	mov	r5, r2
 8005e34:	e7ba      	b.n	8005dac <_printf_i+0x150>
 8005e36:	682b      	ldr	r3, [r5, #0]
 8005e38:	1d1a      	adds	r2, r3, #4
 8005e3a:	602a      	str	r2, [r5, #0]
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	6862      	ldr	r2, [r4, #4]
 8005e40:	2100      	movs	r1, #0
 8005e42:	4628      	mov	r0, r5
 8005e44:	f7fa f9dc 	bl	8000200 <memchr>
 8005e48:	b108      	cbz	r0, 8005e4e <_printf_i+0x1f2>
 8005e4a:	1b40      	subs	r0, r0, r5
 8005e4c:	6060      	str	r0, [r4, #4]
 8005e4e:	6863      	ldr	r3, [r4, #4]
 8005e50:	6123      	str	r3, [r4, #16]
 8005e52:	2300      	movs	r3, #0
 8005e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e58:	e7a8      	b.n	8005dac <_printf_i+0x150>
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4640      	mov	r0, r8
 8005e62:	47d0      	blx	sl
 8005e64:	3001      	adds	r0, #1
 8005e66:	d0ab      	beq.n	8005dc0 <_printf_i+0x164>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	079b      	lsls	r3, r3, #30
 8005e6c:	d413      	bmi.n	8005e96 <_printf_i+0x23a>
 8005e6e:	68e0      	ldr	r0, [r4, #12]
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	4298      	cmp	r0, r3
 8005e74:	bfb8      	it	lt
 8005e76:	4618      	movlt	r0, r3
 8005e78:	e7a4      	b.n	8005dc4 <_printf_i+0x168>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4640      	mov	r0, r8
 8005e82:	47d0      	blx	sl
 8005e84:	3001      	adds	r0, #1
 8005e86:	d09b      	beq.n	8005dc0 <_printf_i+0x164>
 8005e88:	3501      	adds	r5, #1
 8005e8a:	68e3      	ldr	r3, [r4, #12]
 8005e8c:	9903      	ldr	r1, [sp, #12]
 8005e8e:	1a5b      	subs	r3, r3, r1
 8005e90:	42ab      	cmp	r3, r5
 8005e92:	dcf2      	bgt.n	8005e7a <_printf_i+0x21e>
 8005e94:	e7eb      	b.n	8005e6e <_printf_i+0x212>
 8005e96:	2500      	movs	r5, #0
 8005e98:	f104 0619 	add.w	r6, r4, #25
 8005e9c:	e7f5      	b.n	8005e8a <_printf_i+0x22e>
 8005e9e:	bf00      	nop
 8005ea0:	080061ed 	.word	0x080061ed
 8005ea4:	080061fe 	.word	0x080061fe

08005ea8 <memcpy>:
 8005ea8:	440a      	add	r2, r1
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005eb0:	d100      	bne.n	8005eb4 <memcpy+0xc>
 8005eb2:	4770      	bx	lr
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ebe:	4291      	cmp	r1, r2
 8005ec0:	d1f9      	bne.n	8005eb6 <memcpy+0xe>
 8005ec2:	bd10      	pop	{r4, pc}

08005ec4 <memmove>:
 8005ec4:	4288      	cmp	r0, r1
 8005ec6:	b510      	push	{r4, lr}
 8005ec8:	eb01 0402 	add.w	r4, r1, r2
 8005ecc:	d902      	bls.n	8005ed4 <memmove+0x10>
 8005ece:	4284      	cmp	r4, r0
 8005ed0:	4623      	mov	r3, r4
 8005ed2:	d807      	bhi.n	8005ee4 <memmove+0x20>
 8005ed4:	1e43      	subs	r3, r0, #1
 8005ed6:	42a1      	cmp	r1, r4
 8005ed8:	d008      	beq.n	8005eec <memmove+0x28>
 8005eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ee2:	e7f8      	b.n	8005ed6 <memmove+0x12>
 8005ee4:	4402      	add	r2, r0
 8005ee6:	4601      	mov	r1, r0
 8005ee8:	428a      	cmp	r2, r1
 8005eea:	d100      	bne.n	8005eee <memmove+0x2a>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ef6:	e7f7      	b.n	8005ee8 <memmove+0x24>

08005ef8 <_free_r>:
 8005ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005efa:	2900      	cmp	r1, #0
 8005efc:	d044      	beq.n	8005f88 <_free_r+0x90>
 8005efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f02:	9001      	str	r0, [sp, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f1a1 0404 	sub.w	r4, r1, #4
 8005f0a:	bfb8      	it	lt
 8005f0c:	18e4      	addlt	r4, r4, r3
 8005f0e:	f000 f913 	bl	8006138 <__malloc_lock>
 8005f12:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <_free_r+0x94>)
 8005f14:	9801      	ldr	r0, [sp, #4]
 8005f16:	6813      	ldr	r3, [r2, #0]
 8005f18:	b933      	cbnz	r3, 8005f28 <_free_r+0x30>
 8005f1a:	6063      	str	r3, [r4, #4]
 8005f1c:	6014      	str	r4, [r2, #0]
 8005f1e:	b003      	add	sp, #12
 8005f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f24:	f000 b90e 	b.w	8006144 <__malloc_unlock>
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d908      	bls.n	8005f3e <_free_r+0x46>
 8005f2c:	6825      	ldr	r5, [r4, #0]
 8005f2e:	1961      	adds	r1, r4, r5
 8005f30:	428b      	cmp	r3, r1
 8005f32:	bf01      	itttt	eq
 8005f34:	6819      	ldreq	r1, [r3, #0]
 8005f36:	685b      	ldreq	r3, [r3, #4]
 8005f38:	1949      	addeq	r1, r1, r5
 8005f3a:	6021      	streq	r1, [r4, #0]
 8005f3c:	e7ed      	b.n	8005f1a <_free_r+0x22>
 8005f3e:	461a      	mov	r2, r3
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	b10b      	cbz	r3, 8005f48 <_free_r+0x50>
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d9fa      	bls.n	8005f3e <_free_r+0x46>
 8005f48:	6811      	ldr	r1, [r2, #0]
 8005f4a:	1855      	adds	r5, r2, r1
 8005f4c:	42a5      	cmp	r5, r4
 8005f4e:	d10b      	bne.n	8005f68 <_free_r+0x70>
 8005f50:	6824      	ldr	r4, [r4, #0]
 8005f52:	4421      	add	r1, r4
 8005f54:	1854      	adds	r4, r2, r1
 8005f56:	42a3      	cmp	r3, r4
 8005f58:	6011      	str	r1, [r2, #0]
 8005f5a:	d1e0      	bne.n	8005f1e <_free_r+0x26>
 8005f5c:	681c      	ldr	r4, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	6053      	str	r3, [r2, #4]
 8005f62:	4421      	add	r1, r4
 8005f64:	6011      	str	r1, [r2, #0]
 8005f66:	e7da      	b.n	8005f1e <_free_r+0x26>
 8005f68:	d902      	bls.n	8005f70 <_free_r+0x78>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	6003      	str	r3, [r0, #0]
 8005f6e:	e7d6      	b.n	8005f1e <_free_r+0x26>
 8005f70:	6825      	ldr	r5, [r4, #0]
 8005f72:	1961      	adds	r1, r4, r5
 8005f74:	428b      	cmp	r3, r1
 8005f76:	bf04      	itt	eq
 8005f78:	6819      	ldreq	r1, [r3, #0]
 8005f7a:	685b      	ldreq	r3, [r3, #4]
 8005f7c:	6063      	str	r3, [r4, #4]
 8005f7e:	bf04      	itt	eq
 8005f80:	1949      	addeq	r1, r1, r5
 8005f82:	6021      	streq	r1, [r4, #0]
 8005f84:	6054      	str	r4, [r2, #4]
 8005f86:	e7ca      	b.n	8005f1e <_free_r+0x26>
 8005f88:	b003      	add	sp, #12
 8005f8a:	bd30      	pop	{r4, r5, pc}
 8005f8c:	200008c4 	.word	0x200008c4

08005f90 <sbrk_aligned>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	4e0e      	ldr	r6, [pc, #56]	; (8005fcc <sbrk_aligned+0x3c>)
 8005f94:	460c      	mov	r4, r1
 8005f96:	6831      	ldr	r1, [r6, #0]
 8005f98:	4605      	mov	r5, r0
 8005f9a:	b911      	cbnz	r1, 8005fa2 <sbrk_aligned+0x12>
 8005f9c:	f000 f8bc 	bl	8006118 <_sbrk_r>
 8005fa0:	6030      	str	r0, [r6, #0]
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 f8b7 	bl	8006118 <_sbrk_r>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	d00a      	beq.n	8005fc4 <sbrk_aligned+0x34>
 8005fae:	1cc4      	adds	r4, r0, #3
 8005fb0:	f024 0403 	bic.w	r4, r4, #3
 8005fb4:	42a0      	cmp	r0, r4
 8005fb6:	d007      	beq.n	8005fc8 <sbrk_aligned+0x38>
 8005fb8:	1a21      	subs	r1, r4, r0
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f8ac 	bl	8006118 <_sbrk_r>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d101      	bne.n	8005fc8 <sbrk_aligned+0x38>
 8005fc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005fc8:	4620      	mov	r0, r4
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	200008c8 	.word	0x200008c8

08005fd0 <_malloc_r>:
 8005fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd4:	1ccd      	adds	r5, r1, #3
 8005fd6:	f025 0503 	bic.w	r5, r5, #3
 8005fda:	3508      	adds	r5, #8
 8005fdc:	2d0c      	cmp	r5, #12
 8005fde:	bf38      	it	cc
 8005fe0:	250c      	movcc	r5, #12
 8005fe2:	2d00      	cmp	r5, #0
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	db01      	blt.n	8005fec <_malloc_r+0x1c>
 8005fe8:	42a9      	cmp	r1, r5
 8005fea:	d905      	bls.n	8005ff8 <_malloc_r+0x28>
 8005fec:	230c      	movs	r3, #12
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	4e2e      	ldr	r6, [pc, #184]	; (80060b4 <_malloc_r+0xe4>)
 8005ffa:	f000 f89d 	bl	8006138 <__malloc_lock>
 8005ffe:	6833      	ldr	r3, [r6, #0]
 8006000:	461c      	mov	r4, r3
 8006002:	bb34      	cbnz	r4, 8006052 <_malloc_r+0x82>
 8006004:	4629      	mov	r1, r5
 8006006:	4638      	mov	r0, r7
 8006008:	f7ff ffc2 	bl	8005f90 <sbrk_aligned>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	4604      	mov	r4, r0
 8006010:	d14d      	bne.n	80060ae <_malloc_r+0xde>
 8006012:	6834      	ldr	r4, [r6, #0]
 8006014:	4626      	mov	r6, r4
 8006016:	2e00      	cmp	r6, #0
 8006018:	d140      	bne.n	800609c <_malloc_r+0xcc>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	4631      	mov	r1, r6
 800601e:	4638      	mov	r0, r7
 8006020:	eb04 0803 	add.w	r8, r4, r3
 8006024:	f000 f878 	bl	8006118 <_sbrk_r>
 8006028:	4580      	cmp	r8, r0
 800602a:	d13a      	bne.n	80060a2 <_malloc_r+0xd2>
 800602c:	6821      	ldr	r1, [r4, #0]
 800602e:	3503      	adds	r5, #3
 8006030:	1a6d      	subs	r5, r5, r1
 8006032:	f025 0503 	bic.w	r5, r5, #3
 8006036:	3508      	adds	r5, #8
 8006038:	2d0c      	cmp	r5, #12
 800603a:	bf38      	it	cc
 800603c:	250c      	movcc	r5, #12
 800603e:	4629      	mov	r1, r5
 8006040:	4638      	mov	r0, r7
 8006042:	f7ff ffa5 	bl	8005f90 <sbrk_aligned>
 8006046:	3001      	adds	r0, #1
 8006048:	d02b      	beq.n	80060a2 <_malloc_r+0xd2>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	442b      	add	r3, r5
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	e00e      	b.n	8006070 <_malloc_r+0xa0>
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	1b52      	subs	r2, r2, r5
 8006056:	d41e      	bmi.n	8006096 <_malloc_r+0xc6>
 8006058:	2a0b      	cmp	r2, #11
 800605a:	d916      	bls.n	800608a <_malloc_r+0xba>
 800605c:	1961      	adds	r1, r4, r5
 800605e:	42a3      	cmp	r3, r4
 8006060:	6025      	str	r5, [r4, #0]
 8006062:	bf18      	it	ne
 8006064:	6059      	strne	r1, [r3, #4]
 8006066:	6863      	ldr	r3, [r4, #4]
 8006068:	bf08      	it	eq
 800606a:	6031      	streq	r1, [r6, #0]
 800606c:	5162      	str	r2, [r4, r5]
 800606e:	604b      	str	r3, [r1, #4]
 8006070:	4638      	mov	r0, r7
 8006072:	f104 060b 	add.w	r6, r4, #11
 8006076:	f000 f865 	bl	8006144 <__malloc_unlock>
 800607a:	f026 0607 	bic.w	r6, r6, #7
 800607e:	1d23      	adds	r3, r4, #4
 8006080:	1af2      	subs	r2, r6, r3
 8006082:	d0b6      	beq.n	8005ff2 <_malloc_r+0x22>
 8006084:	1b9b      	subs	r3, r3, r6
 8006086:	50a3      	str	r3, [r4, r2]
 8006088:	e7b3      	b.n	8005ff2 <_malloc_r+0x22>
 800608a:	6862      	ldr	r2, [r4, #4]
 800608c:	42a3      	cmp	r3, r4
 800608e:	bf0c      	ite	eq
 8006090:	6032      	streq	r2, [r6, #0]
 8006092:	605a      	strne	r2, [r3, #4]
 8006094:	e7ec      	b.n	8006070 <_malloc_r+0xa0>
 8006096:	4623      	mov	r3, r4
 8006098:	6864      	ldr	r4, [r4, #4]
 800609a:	e7b2      	b.n	8006002 <_malloc_r+0x32>
 800609c:	4634      	mov	r4, r6
 800609e:	6876      	ldr	r6, [r6, #4]
 80060a0:	e7b9      	b.n	8006016 <_malloc_r+0x46>
 80060a2:	230c      	movs	r3, #12
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	4638      	mov	r0, r7
 80060a8:	f000 f84c 	bl	8006144 <__malloc_unlock>
 80060ac:	e7a1      	b.n	8005ff2 <_malloc_r+0x22>
 80060ae:	6025      	str	r5, [r4, #0]
 80060b0:	e7de      	b.n	8006070 <_malloc_r+0xa0>
 80060b2:	bf00      	nop
 80060b4:	200008c4 	.word	0x200008c4

080060b8 <_realloc_r>:
 80060b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060bc:	4680      	mov	r8, r0
 80060be:	4614      	mov	r4, r2
 80060c0:	460e      	mov	r6, r1
 80060c2:	b921      	cbnz	r1, 80060ce <_realloc_r+0x16>
 80060c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	4611      	mov	r1, r2
 80060ca:	f7ff bf81 	b.w	8005fd0 <_malloc_r>
 80060ce:	b92a      	cbnz	r2, 80060dc <_realloc_r+0x24>
 80060d0:	f7ff ff12 	bl	8005ef8 <_free_r>
 80060d4:	4625      	mov	r5, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	f000 f838 	bl	8006150 <_malloc_usable_size_r>
 80060e0:	4284      	cmp	r4, r0
 80060e2:	4607      	mov	r7, r0
 80060e4:	d802      	bhi.n	80060ec <_realloc_r+0x34>
 80060e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060ea:	d812      	bhi.n	8006112 <_realloc_r+0x5a>
 80060ec:	4621      	mov	r1, r4
 80060ee:	4640      	mov	r0, r8
 80060f0:	f7ff ff6e 	bl	8005fd0 <_malloc_r>
 80060f4:	4605      	mov	r5, r0
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d0ed      	beq.n	80060d6 <_realloc_r+0x1e>
 80060fa:	42bc      	cmp	r4, r7
 80060fc:	4622      	mov	r2, r4
 80060fe:	4631      	mov	r1, r6
 8006100:	bf28      	it	cs
 8006102:	463a      	movcs	r2, r7
 8006104:	f7ff fed0 	bl	8005ea8 <memcpy>
 8006108:	4631      	mov	r1, r6
 800610a:	4640      	mov	r0, r8
 800610c:	f7ff fef4 	bl	8005ef8 <_free_r>
 8006110:	e7e1      	b.n	80060d6 <_realloc_r+0x1e>
 8006112:	4635      	mov	r5, r6
 8006114:	e7df      	b.n	80060d6 <_realloc_r+0x1e>
	...

08006118 <_sbrk_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d06      	ldr	r5, [pc, #24]	; (8006134 <_sbrk_r+0x1c>)
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	f7fa fe7e 	bl	8000e24 <_sbrk>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_sbrk_r+0x1a>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_sbrk_r+0x1a>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	200008cc 	.word	0x200008cc

08006138 <__malloc_lock>:
 8006138:	4801      	ldr	r0, [pc, #4]	; (8006140 <__malloc_lock+0x8>)
 800613a:	f000 b811 	b.w	8006160 <__retarget_lock_acquire_recursive>
 800613e:	bf00      	nop
 8006140:	200008d0 	.word	0x200008d0

08006144 <__malloc_unlock>:
 8006144:	4801      	ldr	r0, [pc, #4]	; (800614c <__malloc_unlock+0x8>)
 8006146:	f000 b80c 	b.w	8006162 <__retarget_lock_release_recursive>
 800614a:	bf00      	nop
 800614c:	200008d0 	.word	0x200008d0

08006150 <_malloc_usable_size_r>:
 8006150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006154:	1f18      	subs	r0, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	bfbc      	itt	lt
 800615a:	580b      	ldrlt	r3, [r1, r0]
 800615c:	18c0      	addlt	r0, r0, r3
 800615e:	4770      	bx	lr

08006160 <__retarget_lock_acquire_recursive>:
 8006160:	4770      	bx	lr

08006162 <__retarget_lock_release_recursive>:
 8006162:	4770      	bx	lr

08006164 <_init>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr

08006170 <_fini>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr
